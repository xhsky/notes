简介
	时间, 作者, 定义
    起源于2007年, 2009年正式对外发布
    Go是一种开源的编程语言, 可以轻松构建简单, 可靠, 高效的软件
    Go语言的称呼就是Go, golang只是Go语言官网的域名
	官网: https://golang.org/
    http://pkg.go.dev       包网站
	版本: 每半年发布一个主要版本, 一般在2月和8月
适用性
  1.直接编译成机器码, 不依赖其它库, 只对glibc版本有一定要求. 部署简单
  2.静态类型语言, 但有动态语言的感觉
  3.语言层面支持并发(轻量级线程goroute(通过channel通信), 基于CSP(Communicating, Sequential Process)模型实现)
  4.内置runtime, 支持垃圾回收, 支持管道(channel)
  5.丰富的标准库, 内置强大的工具
  6.跨平台编译

  1. 服务器编程. 例如处理日志, 数据打包, 虚拟机处理, 文件系统等
  2. 分布式系统, 数据库代理器等
  3. 网络编程, 包括web应用, API应用, 下载应用
  4. 内存数据库. 
  5. 云平台

开发
	环境
    二进制安装包:
      $ wget -c https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
      $ tar -xf go1.16.5.linux-amd64.tar.gz /opt/
      $ vim ~/.zshrc
        export PATH=$PATH:/opt/go/bin
      $ source ~/.zshrc
      $ go version
        
      $ go env -w GO111MODULE=on
      $ go env -w GOPROXY=https://goproxy.cn, direct # 设置模块代理     

      $ mkdir /code/program1
      $ cd /code/program1
      $ go mod init
	结构
    api/      # 包含所有api列表, 方便ide使用
      go<version>.txt: 每个版本的api功能列表
      except.txt:      列出在不破坏兼容性的前提下可能会消失的功能
      next.txt:        列出可能会添加到下一版本的功能
    bin/      # 存放由官方提供的go语言相关工具的可执行文件. 默认情况下该目录会包含go和gofmt两个工具
    doc/      # Go语言的各种文档
    lib/      # 引用的一些库文件
    misc/     # 存放各类编辑器或IDE软件的插件
    pkg/      # 用于在构建安装后, 保存go语言标准库的所有归档文件(平台相关目录)
    src/      # 存放所有标准库, go语言工具及相关底层库(C语言实现)的源码
    test/     # 存放测试go语言自身代码的文件文件
	命令
    ./bin/go    # 一个管理go源码的工具
      $ go <command> [arguments]
        Command:
          bug               # 启动bug报告, 提交bug. 打开默认浏览器, 进入go的bug提交页面(默认包含当前的系统信息)
          build [-o output] [build flags] [packages]             # 编译包和依赖
          clean             # 删除目标文件和缓存文件
          doc               # 显示package或symbol的文档
          env [-json] [-u] [-w] [var ...]              # 打印go环境变量信息
            -json                                      # 以json格式打印
            -u var                                     # 取消环境变量
            -w var=value                               # 设置环境变量
          fix               # 更新package以使用新的APIs
          fmt               # gofmt(重新格式化)包源
          generate          # 通过处理source生成go文件
          get               # 将依赖添加到当前模块并安装
          install           # 编译并且安装包和依赖
          list              # 列出包或模块
          mod <command> [args]                                  # 模块维护(go的所有命令值内置了对mod的支持)
            
          run               # 编译并运行go项目
          test              # 测试packages
          tool              # 运行指定的go工具
          version           # 打印go版本
          vet               # 报告package中可能存在的错误
          help              # 显示帮助命令
  环境变量:
    通用环境变量:
      GO111MODULE             # 控制go命令是以module-aware(模块感知)还是以GOPATH模式运行. 可选值 "off", "on", "auto"
      GOARCH                  # 目标系统架构. eg: amd64, arm, arm64(aarch64)
      GOOS                    # 目标操作系统. eg: linux, darwin, windows, netbsd
      GOBIN                   # "go install"命令的安装目录
      GOCACHE                 # 存储缓存信息以便将来build的重用
      GOMODCACHE              # go命令下载module的目录
      GOENV                   # 环境变量的配置文件, 默认$HOME/.config/go/env
      GOFLAGS                 # go命令运行时的标志. 格式为-flag=value, -flag=value
      GOINSECURE              # 逗号分隔的glob模式列表
      GOPROXY                 # go模块代理的url
      GONOPROXY, GOPRIVATE, GONOSUMDB     #  逗号分割的glob模式列表
      GOPATH: GO工作区路径. 从1.11版本开始使用modules代替工作区和GOPATH
        工作区的文件结构:
          src:        # 源代码目录. 
          bin:        # 用来存储通过命令(go install)编译的二进制文件的位置. 最好将该目录添加到$PATH中
          pkg:        # 预编译目标文件的目录, 以加速程序的后续编译. 可删除后重新编译
      GOROOT: GO安装目录, 已不必配置
      GOSUMDB         # 要使用的校验和数据库的名称以及可选的公钥和网址
      GOTMPDIR        # go命令写入的临时源文件, 包和二进制文件的目录
      GOVCS           # 列出可用于匹配服务器的版本控制命令
      GCCGO           # 为"go build -complier=gccgo"运行的gccgo命令
    可从go env获得但不能从环境中读取的变量
      GOEXE                   # 可执行文件的后缀名(win系统为exe, 其它系统为"")
      GOGCCFLAGS              # 提供给CC命令的以空格分隔的参数列表
      GOHOSTARCH              # go二进制工具链的架构
      GOHOSTOS                # go二进制工具链的操作系统
      GOTOOLDIR               # go tools(compile, cover, doc等)安装的目录
      GOVERSION               # go版本    
      GOMOD                   # 主模块的go.mod的绝对路径
    与cgo一起使用的环境变量
      AR
      CC                      # 用于编译C代码的命令
      CXX                     # 用于编译C++代码的命令
      CGO_ENABLED             # 是否启用cgo支持(调用C语言接口)
      CGO_CFLAGS              # cgo编译时传递给编译器的标志C代码
      GO_CPPFLAGS, CGO_CPPFLAGS_ALLOW, CGO_CPPFLAGS_DISALLOW    # C预处理器
      CGO_CXXFLAGS, CGO_CXXFLAGS_ALLOW, CGO_CXXFLAGS_DISALLOW   # C++编译
      CGO_FFLAGS, CGO_FFLAGS_ALLOW, CGO_FFLAGS_DISALLOW         # Fortran编译
      CGO_LDFLAGS, CGO_LDFLAGS_ALLOW, CGO_LDFLAGS_DISALLOW      # 对于linker
      PKG_CONFIG              # pkg-config工具的路径
  文件类型:
    .go                               # go源文件
    .c .h                             # C源文件. 当使用cgo或SWIG时
    .cc .cpp .cxx .hh .hpp .hxx       # C++源文件.当使用cgo或SWIG时
    .m                                # object-C源文件. 当使用cgo或SWIG时
    .s .S .sx                         # 汇编语言源文件. 当使用cgo或SWIG时
    .swig .swigcxx                    # SWIG定义文件
    .syso                             # 系统目标文件
  概念:
    包: go语言以包作为管理单位, 每个文件必须先声明包(不能脱离包而存在), 程序必须有一个main包
      1. Go的代码被组织在包中. 一个包表示磁盘上单个目录中的所有文件(相同功能的代码). 包与Go源代码一起存储在$GOPATH/src目录下
      2. 包可以被其它包引用. 提高代码的可复用性
      3. main包用来生成可执行文件, 每个程序只有一个main包
      4. 同一个包中函数可以直接调用, 不同包中函数, 通过pkg_name.func_name调用
      5. 按照约定, 包名与导入路径的最后一个元素一致(即包名和目录名一致)
      
      包访问控制规则:
        1. 大写开头则该函数/变量可被导出
        2. 小写开头则该函数/变量是私有的, 包外部不能访问
    gomod:
      文件: go.mod, go.sum
语法
	变量:
    声明: var var_name type  / var var_name type = value
    类型:
      bool: true|false
      int, int8, int16, int32, int64, uint64, uint16, uint32, uint64, float32, float64, uintptr
      byte: 代表ASCII码的一个字符, 使用单引号, 实质是uint8
      rune: 代表一个utf-8字符, 使用单引号, 实质是uint32
      string: 底层是byte的数组. 使用双引号
      complex64, complex128

      map: map[key_type]value_type
    默认值: 当没有明确初始值的变量声明会被赋予零值
      整型为0, 字符串为"", bool为false
    类型推导: 在声明一个变量而不指定其类型时, 变量的类型由右值推导得出
      1. 不带类型的 := 和 var = 表达式语法
      2. 当右边为未指明类型的常量时, 根据其精度决定为int, float, complex等
    示例:
      var (
        a int
        b string
        c bool
        d int = 8
        e = 8
      )
    值类型: 变量直接存储值, 内存通常在栈中分配
      int, float, bool, 数组和struct
    引用类型: 变量存储的是一个地址, 地址存储最终的值. 内存通常在堆上分配. 通过GC回收
      指针, slice, map, chan
    类型转换: type(var_name)
  常量: 使用const修饰, 代表只读, 不能修改
    1.const只能修饰字符, 字符串, bool和数值
    2.常量不能用 := 语法声明, 数值常量的类型由上下文决定其类型
    示例: const var_name [type] = value
      - const (
        a=0
        b=1
        c=2
        )
      - const (
        a=iota
        b     // 1
        c     // 2
        )
	引号和转义字符
    引号:
      双引号(""): 用来创建可解析的字符串, 支持转义, 不能用来引用多行
      反引号(``): 用来创建原生的字符串, 不支持转义, 且可多行
      单引号(''): 表示特殊类型: rune. 指点码字面量
	注释
    单行注释: //
    多行注释: /**/
	运算符与表达式
    !, &&, ||,  ==, !=, <, <=, >, >=, +, -, *, /, :=(在一行中声明和初始化变量的快捷方式, 不能在函数外使用), 
	语句
		逻辑控制语句
      循环: go只有一种循环结构(for)
        基本for循环由三部分组成, 他们用分号分开. 初始化语句和后置语句是可选的
          初始化语句: 在第一次迭代前执行, 通常为一句短变量声明
          条件表达式: 在每次迭代前求值, 一旦表达式的布尔值为false, 循环则终止
          后置语句: 每次迭代的结尾执行
        模拟while:
          for var_name < 100 {
            ...
            }
        无限循环:
          for {
            }
      条件: if / switch
        1. Go只运行选定的case, 而非之后所有的case(Go自动提供了在这些语言中每个case后面所需的break语句)
        2. switch的case无需为常量,且取值不必为整数
        if conditon {
        } else {
        }
        switch conditon {
          case "":
            ... 
          case "":
            ...
          default:
          }
      defer: 
        1. 该语句会将其后的函数或表达式压入到一个栈中(不会调用)
        2. 推迟调用的函数其参数会立即求值
        3. 当外层函数返回之后, 被推迟到栈中的函数会按照后进先出的顺序调用(可用于做资源清理: 文件句柄释放, 锁释放, 数据库连接释放)
  数据结构
    指针: 指针保存了值的内存地址. go没有指针运算
      *T 指向T类型的指针. 其零值为nil
      &操作符会生成一个指向其操作数的指针
      *操作符表示指针指向的值
    结构体(struct): 一个结构体就是一组字段, 结构体字段可以通过结构体指针访问
    arrays(数组):
      说明: [n]T 是一个T类型的n个值的数组(长度不可变)
    slice(切片):  []T 表示一个元素类型为T的切片(动态长度)
      1.切片并不存储任何数据, 它只是描述了底层数组中的一段
      2.更改切片的元素会修改其底层对应的元素, 与它共享底层数组的切片同样会修改
      3.go不支持负数索引
      4. 切片拥有长度(len)和容量(cap). len: 切片包含的元素个数, cap: 从切片的第一个元素开始, 到其底层的数组元素末尾的个数
      5. slice的零值是nil, nil切片的len和cap均为0且没有底层数组
    maps(映射): 将键映射到值. var_name = map[key_type]value_type
      1.映射的零值为nil, nil映射既没有键也不能添加键
      2.双赋值功能: elem, ok = m[key]   若key在m中,ok为true;否则, ok为false, elem是该映射元素类型的零值
    并发: goroutine是由go runtime管理的轻量级线程
    信道: 带有类型的管道
	函数
    说明:
      1.不支持重载: 一个包内不能有两个名称一样的函数 
    init函数: 
      1.每个源文件都可以包含一个init函数. 该函数会自动被go运行框架调用(在main函数之前)
      2.若一个项目里存在多个init函数, 则根据import顺序依次调用
    函数声明:
      func 函数名(参数列表) (返回值列表) {
        }
    命名返回值:
      1.go的返回值可被命名, 它们被视为定义在函数顶部的变量
      2.返回值的名称应当具有一定意义, 它可作为文档使用
      3.没有参数的return语句返回已命名的返回值, 即直接返回(直接返回尽量不要用在长函数中, 会影响代码的可读行)
    匿名函数: 未指定函数名的函数即为匿名函数
    闭包: 一个匿名函数与其相关的引用环境组合成的实体
    内置函数:
      append: 
        1.将元素附加到切片的末尾. 如果该切片有足够的容量, 目标将被重新切片以容纳新元素(内存地址不变). 如果没有, 将分配一个新的底层数组(数据拷贝, 内存地址变化且新数组的cap为上一个切片的cap*2).  
        2.Append返回更新后的切片. 因此有必要将append的结果存储在保存切片本身的变量中
      range:
        1.每次迭代都会返回两个值. 第一个值为当前元素的下标, 第二个值为该下标所对应元素的一份副本. 
        2.若只需要索引, 忽略第二个变量即可.  for i := range pow
      close: 主要用来关闭channel
      len: 获取长度, eg: string, array, slice, map, channel
      new: 用来分配内存, 主要用来分配值类型, 返回指针
      make: 用来分配内存, 主要用来分配引用类型
      append: 用来追加元素到slice中
      panic和recover: 用来做错误处理
	对象
	异常
  关键字:
    import: 导入
      单独导入:import "fmt"
      分组导入: import (
                  "fmt"
                  "math"
                )
      别名:
        import (
          alias_name "haha"
        )
      导出名称: 
        1.若一个名称以大写字母开头, 则它就是已导出的(在导入一个包时, 只能引用其已导出的名称. 任何未导出的名称在该包外均无法访问)
        2.以大写字符开头的函数可以被不在同一个包中的函数调用
    空白标识符(_):  _是特殊字符, 用来忽略结果(此时不可用于变量)
      - a, _ = mod1.func1()     // 忽略第二个返回值
      - import (
          _ "add"               // 只引入该模块(使用其初始化函数)而不使用
        )
    for
    break
    continue
    default
    func: 
    return
    interface
    select
    switch
    case
    defer: 
    go
    map
    struct
    chan
    if
    else
    goto
    package
    const
    var
    fallthough
    range
    type


  

