简介
	时间，作者，开发语言，定义
    诞生于2013年初, 最初发起者时dotCloud公司(后改名Docker Inc). 是基于go语言实现的开源容器项目.
    docker的理念: 在任何地方构建, 发布并运行任何应用
	官网:
    Docker官网        https://www.docker.com
    Docker中文官网    https://www.docker-cn.com
    Docker中文社区		http://dockboard.org
    Docker@Github 		https://github.com/docker/docker/issues
    Docker Hub			  https://hub.docker.com/
	版本
    1.分为社区版(CE)和企业版(EE)
    2.社区版本每个月会发布一次尝鲜(Edge)版本, 每个季度(3, 6, 9, 12)会发行一次稳定(Stable)版本
    3.版本号命名格式为"年份.月份", eg: 18.09
	协议: Apache 2.0
适用性(优缺)
  1.docker比vm更少的抽象层. docker不需要hypervisor实现硬件资源虚拟化, 运行在docker上的程序都是直接使用实际的硬件资源, 因此在CPU, 内存利用率上会有显著优势
  2.docker利用的时宿主机的内核而不需要guest os. 因此当新建一个容器时, docker不需要和vm一样重新加载一个操作系统内核

  特点:
    1.提供简单轻量的建模方式
    2.职责的逻辑分类
    3.快速高效的开发生命周期
    4.鼓励使用面向服务的架构
  使用场景:
    1.使用docker容器开发, 测试, 部署
    2.创建隔离的运行环境
    3.搭建测试环境
    4.构建多用户的平台即服务(PaaS)基础设施
    5.提供软件即服务(SaaS)应用部署
    6.高性能, 超大规模的宿主机部署
架构
	模块
	安装
    1.安装依赖包
      # yum install yum-utils device-mapper-persistent-data lvm2 -y
    2.设置stable镜像仓库
      # yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo   # docker官方(慢)
      # yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    # 阿里云(快)
    3.安装docker
      # yum install docker-ce docker-ce-cli containerd.io
    4.启动
      # systemctl start docker
    5.验证docker是否被正确安装
      # docker run hello-world
    6.配置镜像加速
      # vim /etc/docker/daemon.json
        {
            "registry-mirrors": ["https://mk2azw0n.mirror.aliyuncs.com"]
        }
      # systemctl restart docker
    7.卸载
      # yum remove docker-ce
      # rm -rf /var/lib/docker


    1.curl -fsSL https://get.docker.com/ | sh
    1.wget -qO- https://get.docker.com/ | sh
	结构
		目录结构
			源码目录
			安装目录
		        配置文件
		进程/端口
      dockerd: 为客户的提供RESTful API, 相应来自客户端的请求, 采用来自模块化的架构, 通过专门的Engine模块来分发管理各个来自客户端的任务.可以单独升级
      docker-proxy: 是dockerd的子进程, 当需要进行容器端口映射时, docker-proxy完成网络映射配置
      containerd: 是dockerd的子进程, 提供gRPC接口相应来自dockerd的请求, 对下管理runC镜像和容器环境, 可单独升级
      containerd-shim: 是containerd的子进程, 为runC容器提供支持, 同时作为容器内进程的根进程
		编程接口
		管理软件
	命令
		服务器
      # docker-init
      # docker-proxy
      # dockerd-ce [option]
				--add-runtime runtime                     Register an additional OCI
																									compatible runtime (default [])
				--allow-nondistributable-artifacts list   Allow push of nondistributable
																									artifacts to registry
				--api-cors-header string                  Set CORS headers in the Engine API
				--authorization-plugin list               Authorization plugins to load
				--bip CIDR          # 指定网桥网络ip
				-b str							# 指定容器挂载的网桥
																									bridge
				--cgroup-parent string                    Set parent cgroup for all containers
				--cluster-advertise string                Address or interface name to
																									advertise
				--cluster-store string                    URL of the distributed storage
																									backend
				--cluster-store-opt map                   Set cluster store options
																									(default map[])
				--config-file string                      Daemon configuration file
																									(default "/etc/docker/daemon.json")
				--containerd string                       containerd grpc address
				--cpu-rt-period int                       Limit the CPU real-time period
																									in microseconds
				--cpu-rt-runtime int                      Limit the CPU real-time runtime
																									in microseconds
				--cri-containerd                          start containerd with cri
				--data-root string                        Root directory of persistent
																									Docker state (default
																									"/var/lib/docker")
        -D, --debug                                   Enable debug mode
				--default-address-pool pool-options       Default address pools for node
																									specific local networks
				--default-gateway ip                      Container default gateway IPv4
																									address
				--default-gateway-v6 ip                   Container default gateway IPv6
																									address
				--default-ipc-mode string                 Default mode for containers ipc
																									("shareable" | "private")
																									(default "shareable")
				--default-runtime string                  Default OCI runtime for
																									containers (default "runc")
				--default-shm-size bytes                  Default shm size for containers
																									(default 64MiB)
				--default-ulimit ulimit                   Default ulimits for containers
																									(default [])
				--dns list           # 使用指定的DNS服务器                    
				--dns-opt list       # DNS选项 
				--dns-search list    # DNS搜索域
				--exec-opt list                           Runtime execution options
				--exec-root string                        Root directory for execution
																									state files (default
																									"/var/run/docker")
				--experimental                            Enable experimental features
				--fixed-cidr string                       IPv4 subnet for fixed IPs
				--fixed-cidr-v6 string                    IPv6 subnet for fixed IPs
        -G, --group string                            Group for the unix socket
																									(default "docker")
				--help                                    Print usage
        -H list               # 要连接的服务
				--icc true|false      # 知否支持容器之间通信, 默认为true
				--init                                    Run an init in the container to
																									forward signals and reap processes
				--init-path string                        Path to the docker-init binary
				--insecure-registry list                  Enable insecure registry
																									communication
				--ip ip                                   Default IP when binding
																									container ports (default 0.0.0.0)
				--ip-forward          # 启用net.ipv4.ip_forward(即打开转发功能), 默认为true
				--ip-masq                                 Enable IP masquerading (default
																									true)
				--iptables            # Docker添加iptables规则, 默认为true
				--ipv6                                    Enable IPv6 networking
				--label list                              Set key=value labels to the daemon
				--live-restore                            Enable live restore of docker
																									when containers are still running
				--log-driver string                       Default driver for container
																									logs (default "json-file")
        -l, --log-level string                        Set the logging level
																									("debug"|"info"|"warn"|"error"|"fatal") (default "info")
				--log-opt map                             Default log driver options for
																									containers (default map[])
				--max-concurrent-downloads int            Set the max concurrent
																									downloads for each pull (default 3)
				--max-concurrent-uploads int              Set the max concurrent uploads
																									for each push (default 5)
				--metrics-addr string                     Set default address and port to
																									serve the metrics api on
				--mtu int             # 容器网络中的MTU                   
				--network-control-plane-mtu int           Network Control plane MTU
																									(default 1500)
				--no-new-privileges                       Set no-new-privileges by
																									default for new containers
				--node-generic-resource list              Advertise user-defined resource
				--oom-score-adjust int                    Set the oom_score_adj for the
																									daemon (default -500)
        -p, --pidfile string                          Path to use for daemon PID file
																									(default "/var/run/docker.pid")
				--raw-logs                                Full timestamps without ANSI
																									coloring
				--registry-mirror list                    Preferred Docker registry mirror
				--seccomp-profile string                  Path to seccomp profile
				--selinux-enabled                         Enable selinux support
				--shutdown-timeout int                    Set the default shutdown
																									timeout (default 15)
        -s, --storage-driver string                   Storage driver to use
				--storage-opt list                        Storage driver options
				--swarm-default-advertise-addr string     Set default address or
																									interface for swarm advertised
																									address
				--tls                                     Use TLS; implied by --tlsverify
				--tlscacert string                        Trust certs signed only by this
																									CA (default
																									"/home/sky/.docker/ca.pem")
				--tlscert string                          Path to TLS certificate file
																									(default
																									"/home/sky/.docker/cert.pem")
				--tlskey string                           Path to TLS key file (default
																									"/home/sky/.docker/key.pem")
				--tlsverify                               Use TLS and verify the remote
				--userland-proxy                          Use userland proxy for loopback
																									traffic (default true)
				--userland-proxy-path string              Path to the userland proxy binary
				--userns-remap string                     User/Group setting for user
																									namespaces
        -v, --version                                 Print version information and quit
		客户端
      # docker [option] command
        option:
          --config file     # 配置文件路径, 默认/root/.docker
          -D                # 启用debug模式
          -H                # 连接的服务器, 默认unix:///var/run/docker.sock
          -v                # 打印版本信息
        management command:
					builder prune                       # 移除构建缓存
            -a                                # 移除所有未使用的镜像
            --filter filter                   # 
            -f                                # 不要提示确认
            --keep-storage bytes              # 要为缓存保留的磁盘空间
					config commands
            create                            # 创建配置
            inspect                           # 显示配置的详细信息
            ls                                # 列出所有配置
            rm                                # 删除配置
					container commands                  
            attach                            # 
            commit                            # 从一个更改的容器中创建一个新镜像
            cp                                # 在容器和本地文件系统间拷贝文件或目录
            create                            # 创建一个新容器
            diff                              # 
            exec
            export
            inspect
            kill
            logs
            ls
            pause
            port
            prune                             # 移除所有停止的容器
              --filter filter
              -f                              # 强制删除, 不用确认
            rename
            restart
            rm
            run
            start
            stats
            stop
            top
            unpause
            update
            wait
					engine commands
            active
            check
            update
					image command
            build
            history
            import
            inspect
            load
            ls
            prune                             # 移除未使用的镜像
              -a                              # 移除所有未使用的镜像, 不仅仅是dangline ones
              -filter filter                  # 提供过滤值
              -f                              # 强制删除, 不提示
            pull
            push
            rm
            save
            tag
					network commands
            connect network_id container_id   # 将容器与网络连接 
              --alias str                     # 为容器增加network-scoped
              --ip str                        # ipv4地址
              --ip6 str                       # ipv6地址
              --link list                     # 添加另一个容器的连接
              --link-local-ip str             # 为容器添加本地连接地址
            create network                    # 创建网络
              --attachable                    # 启用手动挂载
              --aux-address map               # 辅助的ip地址
              --config-from str               # 从某个网络复制配置数据
              --config-only                   # 启用仅可配置模式
              -d str                          # 网络驱动模型, 默认bridge
              --gateway str                   # 网关地址
              --ingress                       # 创建swarm路由网络
              --internal                      # 禁止外部对创建的网络访问
              --ip-range str                  # 指定分配的ip地址范围
              --ipam-driver str               # ip地址管理的插件类型
              --ipam-opt map                  # 设置IPAM驱动选项
              --ipv6                          # 支持ipv6地址
              --label list                    # 为网络添加元数据信息
              -o map                          # 网络驱动支持的选项
              --scope str                     # 指定网络范围
              --subnet str                    # 网络地址端, CIDR格式(172.17.0.0/16)
            disconnect network_id container_id# 将容器与网络断开
              -f                              # 强制
            inspect network_id                # 显示网络详细信息
              -f str                          # 按格式输出
              -v                              # 详细输出
            ls                                # 列出网络
              -f filter                       # 过滤
              --format str                    # 按格式输出
              --no-trunc                      # 不截断输出
              -q                              # 只显示网络id
            prune                             # 删除所有未使用的网络
              --filter filter                 # 过滤
              -f                              # 不提示确认
            rm network_id                     # 删除网络
					node command
            demote
            inspect
            ls
            promote
            ps
            rm
            update
					plugin command
            create
            disable
            enable
            inspect
            intall
            ls
            psuh
            rm
            set
            upgrade
					secret command
            create
            inspecct
            ls
            rm
					service command
            create
            inspect
            logs
            ls
            ps
            rm
            rollback
            scale
            update
					stack command
            deploy
            ls
            ps
            rm
            services
					swarm       Manage Swarm                                                                                                                                                   
            ca
            init
            join
            join-token
            leave
            unlock
            unlock-key
            update
					system command
            df
            events
            info
            prune
					trust command
            inspect
            revoke
            sign
					volume command                  # 数据卷管理
            create volume                 # 创建一个数据卷
              -d str                      # 指定数据卷驱动名称, 默认local
              --label list                # 为volume设置元数据信息
              -o map                      # 为驱动指定选项, 默认map[]
            inspect volume ...            # 显示数据卷的详细信息
            ls                            # 列出数据卷
              -f 
              --format str
              -q                          # 只显示数据卷名称
            prune                         # 删除本地所有未使用的数据卷
              --filter filter             # 过滤条件
              -f                          # 强制删除, 不提示
            rm volume ...                 # 删除数据卷
              -f                          # 强制删除, 不提示
        command:
          > 镜像
            创建镜像
            commit [option] container [repo[:tag]]      # 依据容器创建一个新镜像
              -a str                      # 作者(sky <x_hsky@163.com>)
              -c list                     # 提交的时候执行Dockerfile指令
              -m str                      # 提交信息
              -p                          # 在提交过程中暂停容器(默认true)
            build [option] path|url|-     # 根据docker file建立镜像
              --add-host list             # 添加一个host-to-ip的映射(host:ip)
              -build-arg list             # 设置建立时变量
              --cache-from str            # 使用指定镜像作为缓冲源
              --cgroup-parent str         # 继承上层的cgroup
              --compress                  # 使用gzip压缩上下文数据
              --cpu-period int            # 分配的CFS调度器时长
              --cpu-quota int             # CFS调度器总份额
              -c int                      # cpu份额(相对权重)
              --cpuset-cpus str           # 允许使用的CPU
              --cpuset-mems str           # 允许使用的内存
              -f file                     # docker file的名称, 默认Dockerfile
              --force-rm                  # 始终移除中间过程的容器
              --iidfile str               # 写入image id到文件中
              --isolation str             # 容器隔离技术
              --label list                # 为镜像设置元数据
              -m bytes                    # 内存限制
              -memory-swap byts           # 内存和swap限制(等于mem+swap, -1表示不限制)
              --network str               # 在构建期间为run指定设置的网络模式(默认default), 可选值:
              --no-cache                  # 当构建镜像时不使用缓存
              --pull                      # 总是尝试pull一个更新版本的镜像
              -q                          # 抑制构建输出, 成功后打印image id
              --rm                        # 建立成功后移除中间容器(默认true)
              --security-opt str          # 安全选项
              --shm-size bytes            # /dev/shm的大小
              -t list                     # 镜像的名称(name:tag)
              --target str                # 指定创建的目标阶段
              --ulimit ulimit             # ulimit选项(默认[])
            导入导出镜像:
            save -o file.tar image ...    # 将一个或多个镜像导出到本地文件中
            load [option]                 # 从标准输入或tar包中加载镜像
              -i tar_file                 # 指定tar包文件
              -q                          # 抑制加载输出
            上传下载镜像:
            search [option] term          # 从docker hub上查询images
              -f filter                   # 过滤输出内容
              --format str                # 格式化输出内容
              --limit N                   # 查询结果的最大数量, 默认25
              --no-trunc                  # 不截断输出
            pull [option] name[:tag|#digest]            # 从注册服务器上拉取一个镜像或仓库
              -a                          # 从repo中下载所有的tag镜像
              --disable-content-trust     # 跳过镜像验证, 默认为true
            push [register:port/]name[:tag]             # 往注册服务器上传镜像或仓库
            # 查看镜像
            images [option] [repo[:tag]]  # 列出本地镜像
              -a:                         # 列出所有镜像, 默认隐藏中间镜像
              -q:                         # 只显示image id
              --digests:                  # 显示数字摘要
              -f []                       # 过滤列出的镜像
              --format str                # 控制输出格式
              --no-trunc:                 # 不截取输出
            history [option] image        # 显示镜像构建的历史
              -H                          # 大小和日期以易读方式显示, 默认为true
              --no-trunc                  # 不截断显示
              -q                          # 只显示镜像id
            tag s_image[:tag] t_image[:tag]      # 为image添加新的标签, 实质是别名
            rmi [option] image ...        # 删除一个或多个镜像
              -f                          # 强制删除镜像, 即使有容器依赖
              --no-prune                  # 不删除未带标签的父镜像
          > 容器
            创建删除容器:
            create [option] image [command]             # 创建一个容器(stopped)
              --add-list
              -a list                     # 绑定到标准输入, 输出和错误
              --blkio-weight uint16       # block IO(相对权重). 范围10-1000, 0表示禁用, 默认为0
              --blkio-weight-device list  # block IO权重(相对设备权重), 默认为[]
              --cap-add list              # 添加Linux功能
              --cap-drop list             # 去除Linux功能
              --cgroup-parent str
              --cidfile str               # 
              --cpu-period int
              --cpu-quota int
              --cpu-rt-period int
              --cpu-rt-runtime int
              -c
              --cpus decimal
              --cpuset-cpus str
              --cpuset-mems str
              --device list               # 
              --device-cgroup-rule list   # 
              --device-read-bps list
              --device-read-iops list
              --disable-content-trust
              --dns list
              --dns-option list
              --dns-sarch list
              --entrypoint str
              -e list
              --env-file list
              --expose list
              --group-add list
              --health-cmd str
              --health-interval duration
              --health-retries int
              --health-start-period durati
              --health-timeout duration
              -h str                      # 容器的主机名
              --init
              -i
              -ip str
              -ipc                        # 使用ipc模式
              -isolation str
              --kernel-memory bytes       # 内核内存限制
              -l list                     # 为容器设置元数据
              --label-file list           # 
              --link list                 #
              --link-local-ip
              --log-driver str
              --log-opt list
              --mac-address string        # 容器内存地址
              -m bytes                    # 内存限制
              --memory-reservation bytes  # 
              --memory-swap bytes
              --memroy-swappiness int
              --mount mount
              --name str                  # 容器名称
              --network str     
              --network-alias list
              --no-healthcheck
              --oom-kill-disable          # 禁用OOM killer
              --oom-score-adj int         # 
              --pid str                   # 使用pid命名空间
              --pids-limit int            # 
              --privileged                # 给容器额外的权限
              -p list                     # 将容器的端口发布给主机
              -p                          # 发布所有exposed的端口到主机的随机端口
              --read-only                 # 只读挂载容器的文件系统
              --restart str               # 
              --rm                        # 当容器存在时自动删除
              --runtime str               # 
              --security-oop list
              --shm-size bytes            # 
              --stop-signal str           # 
              --stop-timeout int
              --storage-opt list
              --sysctl map
              --tmpfs list
              -t                          # 附加tty
              --ulimit ulimit             # ulimit选项, 默认[]
              -u user                     # user
              -userns str                 # 使用用户命名空间
              --uts str                   # 使用UTS命名空间
              -v list                     # 绑定一个volume
              --volume-driver str         # 
              --volumes-from list
              -w workdir                  # 指定工作目录
            run [option] image command    # 在一个新容器内运行命令(相当于create+start)
              > 运行模式
                -a list                     # 附加进容器
                -d                          # 是否放在后台运行
                -i                          # 交互式
                -t                          # 添加伪终端
                --detach-keys str           # 从attach模式退出的快捷键
                --entrypoint str            # 覆盖镜像中默认的entrypoint命令
                --expose list               # 指定容器要暴露的端口或端口范围
                --group-add list            # 运行容器的用户组
                --ipc str                   # 使用ipc模式
                --isolation str             # 容器使用的隔离机制, 默认default
                --log-driver str            # 容器的日志容器驱动类型
                --log-opt list              # 传递给日志驱动的选项
                --network str               # 容器的网络配置, 默认default
                                            # bridge: 默认值, 在docker0上为容器创建新的网络栈, 分配网卡, ip等网络配置
                                            # none: 为容器创建独立的网络命名空间, 但不进行网络配置, 由用户自行配置
                                            # container:name_or_id: docker将新建容器的进程放到一个已存在容器的网络栈中, 新容器进程拥有自己的文件系统, 进程列表和资源限制, 但会和已存在的容器共享IP地址和端口等网络资源.
                                            # host: 不会将容器网络放到隔离的命名空间中(即不会容器化容器内的网络).此时容器使用主机的网络资源
                                            # user_defined_network: 用户自行用network相关命令创建一个网络, 之后将容器连接指定到自己创建的网络上去 
                --network-alias list        # 添加容器在网络中的别名
                -p list                     # 指定端口映射(ip:host_port:container_port|ip::container_port|host_port:container_port|container_port)
                -P                          # 随机端口映射(nat机制)
                --pid str                   # pid命名空间
                --userns str                # 用户命名空间
                --uts                       # uts命令空间
                --restart str               # 当重启docker时该容器的策略, 默认为no(no, no-failure[:max-retry], always, unless-stopped)
                --rm                        # 容器退出后是否自动删除
                --tmpfs list                # 挂载tmpfs文件系统
                -v host_dir:co_dir:[rw|ro] # 挂载主机上的目录到容器内
                --volume-driver str         # 卷的驱动类型
                --volumes-from list         # 从指定的容器中挂载卷
                -w  workdir                 # 进入容器的工作目录
              > 环境和配置
                --add-host list             # 添加自定义host-to-ip映射(host:ip)
                --device list               # 为容器添加主机驱动
                --dns-search list           # dns搜索域
                --dns-option list           # 自定义dns选项
                --dns list                  # 设置dns服务器
                -e list                     # 设置环境变量
                --evn-file file             # 从文件中读取环境变量
                -h str                      # 设置容器主机名
                --ip str                    # 指定容器的ipv4地址
                --ip6 str                   # 指定容器的ipv6地址 
                --link name:alias           # 记录其它容器的主机名(/etc/hosts), 新建容器可以使用主机名同该容器通信
                --link-local-ip list        # 容器ip连接本地地址
                --mac-address str           # 指定容器的mac地址
                --name str                  # 指定容器名
              > 资源限制和安全保护
                --blkio-weight uint16         # 容器读写块设备的I/O性能权重, 范围10-1000, 0表示禁用, 默认0
                --blkio-weight-device list    # 指定各个块设备的I/O性能权重, 默认[]
                -c int                        # 允许容器使用CPU资源的相对权重, 默认一个容器一个核心
                --cap-add list                # 增加Linux能力
                --cap-drop list               # 移除Linux能力
                --cgroup-parent str           # 容器可选的cgroups
                --cidfile str                 # 将容器的id写入文件
                --cpu-period int              # 限制容器在CFS下的CPU周期
                --cpu-quota int               # 限制容器在CFS下的CPU配额
                --cpuset-cpus str             # 哪些CPU核心能被执行(0-3, 0,1)
                --cpuset-mems str             # 哪些mem能被使用(0-3, 0,1)
                --device-read-bps list        # 限制某设备read(bytes/s), 默认[]
                --device-read-iops list       # 限制某设备read(io/s), 默认[]
                --device-write-bps list       # 限制某设备write(bytes/s), 默认[]
                --device-write-iops list      # 限制某设备write(io/s), 默认[]
                --health-cmd str              # 执行容器健康检查的命令
                --health-intreval t           # 运行健康检查的间隔时间(ms|s|m|h), 默认0s
                --health-retries int          # 健康检查失败的重试次数, 超过则认为不健康
                --health-start-period t       # 容器启动后进行健康检查的等待时间(ms|s|m|h), 默认0s
                --health-timeout t            # 健康检查的超时时间(ms|s|m|h), 默认0s
                --no-healthcheck              # 是否禁用健康检查
                --init                        # 在容器中执行一个init进程, 来负责响应信号和处理僵尸状态进程
                --kernel-memory bytes         # 限制容器使用内核的内存大小
                -m  bytes                     # 容器内存限制
                --memory-reservation byte     # 内存软限制
                --memory-swap bytes           # swap限制(等于swap和mem), -1表示无限制
                --oom-kill-disable            # 禁止OOM杀掉容器
                --oom-sceore-adj int          # 调整主机的OOM偏好(-1000-1000)
                --pids-limit int              # 调整容器的pid限制
                --privileged                  # 是否给容器最高权限
                --read-only                   # 容器是否只读
                --security-opt                # 指定安全参数
                --stop-signal str             # 停止容器的信号(默认sigterm)
                --shm-size byte               # /dev/shm的大小
                --sig-proxy                   # 是否将收到的信号发给应用  
                --memory-swappiness int       # 调整容器的swap参数(0-100), 默认-1
                -u user                       # 指定在容器内指定命令的用户
                --userns str                  # 使用用户命名空间
                --ulimit ulimit               # ulimit选项, 默认[]
                -l list                       # 以键值对方式指定容器的标签信息
                --label-file file             # 从文件中读取标签信息
            rm [option] container ...     # 删除容器
              -f                          # 强制删除一个运行的容器(使用kill)
              -l                          # 删除容器的连接, 但保留容器
              -v                          # 删除和容器相关联的volumes
            重启容器:
            stop [option] container ...   # 停止容器
              -t N                        # 等待超时时间(默认10s), 否则kill
            start [option] container ...  # 启动一个或多个已停止的容器
              -ai                         # 附加到容器内
            restart [option] container ...# 重启container
              -t N                        # 等待关闭时间(默认10s), 否则kill
            kill [option] container ...   # 关闭一个或多个运行着的容器
              -s str                      # 发送信息, 默认kill
            暂停容器:
            pause container ...           # 暂停容器
            unpause container ...         # 恢复容器运行
            进入容器:
            attach [option] container     # 将本地的标准输入/输出/错误流附加到正在运行的container. 所有窗口同步显示
            exec [option] container command             # 在运行的容器中运行命令
              -d                          # 后台运行命令
              -e list                     # 设置环境变量
              -it                         # 交互式且附加tty
              --privileged                # 给命令以额外的权限
              -u uid:gid                  # 执行命令的用户名
              -w str                      # 设置进入的工作目录
            查看:
            ps [option]                   # 列出所有运行容器
              -a                          # 列出所有容器(包括非运行)
              -f
              -n N                        # 显示前N个容器
              -l                          # 显示最新一个容器
              --no-trunc                  # 不截断输出
              -q                          # 仅显示容器id
              -s                          # 显示文件大小
            logs [option] container       # 查看容器的输出信息
              --details                   # 打印详细信息
              -f                          # 实时显示
              -t                          # 日志显示时间戳
              --tail N                    # 显示结尾N行日志
              --since str                 # 从timestamp开始显示日志
              --until str                 # 在timestamp以前显示日志
            inspect [option] name|id ...  # 返回关于docker对象的低级信息
              -f str                      # 格式输出
              -s                          # 如果类型为容器, 这显示文件大小
              --type str                  # 
            top container [ps options]    # 显示容器内运行的程序
            stats [option] [container ...]# 显示容器统计信息
              -a                          # 显示所有容器(默认只显示运行的)
              --format str                # 格式化输出信息
              --no-stream                 # 非流状态显示
              --no-trunc                  # 不截断
            导入和导出容器:
            export -o file.tar container  # 将容器的文件系统以tar包形式导出(不论是否运行)
            import [option] file|url|- [repo[:tag]]     # 将tar包中内容导入形成新镜像(与load区别为export无所有的历史记录和元数据信息)
              -c list                     # 提交的时候执行Dockerfile指令
              -m str                      # 提交信息
            其它:
            wait container ...            # 
            cp [option] container:dir local_dir|local_dir container:dir         # 在容器和本地文件系统之间拷贝文件或目录
              -a                          # 打包模式, 复制文件会带有原始的uid/gid信息
              -L                          # 拷贝软连接的实际文件
            diff container                # 检查容器中文件系统的更改
            port container [private_port[/proto]]         # 列出端口映射
            rename container new_name     # 重命名container
            update [option] container ... # 更新容器的运行时配置
              --blkio-weight uint16       # 
              --cpu-period int
              --cpu-quoat int
              --cpu-rt-period int
              --cpu-rt-runtime int
              -c
              --cpus decimal
              --cpuset-cpus str
              --cpuset-mems str
              --kernel-memory bytes
              -m
              --memory-reservation bytes
              --memory-swap bytes
              --restart str
            events [option]               # 从服务器获取实时事件
              -f                          # 
              --format str
              --since str
              --until str
          > 仓库
					login [option] [server]       # 登录一个docker注册服务器
            -p str
            -u str
					logout [server]               # 退出注册服务器
					info:                         # 显示docker服务端信息
					version:                      # 显示docker版本     
      退出:
        1.exit: 容器停止退出
        2. ctrl+p+q: 容器不停止退出
	日志
	优化
	安全
	集群
    私有仓库:
      说明: 可利用docker来简单搭建一套本地私有仓库环境
      步骤:
        1.添加安全私库配置
          .# vim /etc/docker/daemon.json
            {"insecure-registries": ["10.128.2.107:5000"]}
        2.重启
          .# systemctl daemon-reload
          .# systemctl start docker
        3.下载并启动register
          .# docker pull registry
          .# docker run -d --name "myregistry" -v /opt/data/registry:/var/lib/r[root@localhost docker]# docker run -d --name "myregistry" -p 5000:5000 -v /opt/data/regist
        4.打标签并上传
          .# docker tag sky/mycentos:1.1 10.128.2.107:5000/test
          .# docker push 10.128.2.107:5000/test

      Docker三剑客:
        Machine:
          说明: 是docker官方的开源项目, 负责实现对Docker运行环境进行安装和管理. 主要由go语言编写
具体服务相关
	概念:
		原理:
      1.docker最初是基于LXC技术, 但从0.9版本开始, 开发了libcontainer项目作为更广泛的容器驱动实现, 从而替换掉了LXC
      2.docker是C/S架构的程序
    联合文件系统(UnionFS):
      说明: 是一种轻量级的高性能分层文件系统.它支持将文件系统中的修改信息作为一次提交, 并层层叠加, 同时可以将不同的目录挂载到同一个
        虚拟文件系统下, 应用看到的是最终的结果.联合文件系统是实现docker image的基础
    核心概念:
      1.镜像(image): 一个只读的模板, 可用来创建docker容器.
        说明: docker image是一个层叠的只读文件系统
          - 最低端是一个引导文件系统(bootfs, 当一个容器启动后会被移动到内存中, 而bootfs会被卸载).
          - 第二层是只读rootfs(某种文件系统, eg: centos, ubuntu)
          - 第三层是同时加载一种或多种只读文件系统(利用联合加载(union mount)技术, 将各层文件系统叠加到一起, 最终的文件系统会包含所有的底层文件和目录)
      2.容器(container): 类似一个轻量级的沙箱, docker根据image生成容器来运行和隔离应用
        说明:
          - 当容器启动时, docker会在image之上添加一个读写文件系统(可写层)
          - 当文件系统发生变化时, 所有的变化都会应用到可写层上(修改的文件会从下面的只读层复制到可写层, 可写层的文件将只读层的文件隐藏(写时复制))
        run容器过程:
          - 检查本地是否有指定的镜像, 不存在则从公共仓库下载
          - 利用镜像创建一个容器, 并启动该容器
          - 分配一个文件系统给容器, 并在只读的镜像层外挂载一层可读写层
          - 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中
          - 从网桥的地址池中配置一个ip地址给容器
          - 执行用户指定的应用程序
          - 执行完毕后容器自动被终止
      3.仓库(repository): 集中存放镜像文件的场所
        仓库注册服务器(registry): 存放多个仓库, 每个仓库存放某一类镜像(可通过不同的标签(tag)进行区分)
        公开仓库: 最大的公开仓库(hub.docker.com)
        私有仓库:
    docker依赖的Linux内核特性:
      说明:docker本质是宿主机上的一个进程.通过namespace实现了资源隔离, 通过cgroup实现了资源限制, 通过写时复制实现了高效的文件操作
      命名空间(namespace):
        PID命名空间: 对于同一个进程, 在不同的命名空间中看到的进程号不同
        IPC命名空间: 在同一个IPC命名空间下的进程可以彼此交互
        Network命名空间: 每一个网络命名空间为进程提供了一个完整独立的网络协议栈, 包括网络设备接口, IPv4和IPv6协议栈, IP路由表, 防火墙规则, sockets等
        Mount命名空间: 类似与chroot, 挂载命名空间可以将一个进程的根文件系统限制在一个特定的目录下
        UTS命名空间: UTS(Unix Time-sharing System)允许每个容器拥有独立的主机名和域名
        User命名空间: 每个容器可以有不同的user和group.
      控制组(control groups, cgroups): 用来对资源进行隔离, 限制, 审计
        1.资源限制
        2.优先级分配
        3.资源统计
        4.任务控制
    数据管理:
      1.数据卷:
        说明: 将主机操作系统目录直接映射进容器, 类似mount
        特性:
          1.多个容器之间共享
          2.对数据卷数据更改, 容器和主机内会立即生效
          3.数据卷的更新不会影响镜像本身
          4.数据卷会一直存在(即使容器被删除)
        分类:
          1.volume: 普通数据卷, 映射到/var/lib/docker/volumes/目录下, 由docker volume命令来管理. 通过 -v volume_name:/path或-v /path创建
          2.bind: 绑定数据卷, 映射到主机指定目录下. 由-v /path:/path创建
          3.tmpfs:临时数据卷, 只存在内存中
        注: 若挂载文件到容器, 编辑后可能会造成inode的改变导致报错
      2.数据卷容器:
        说明:使用特定容器维护数据卷
          1.数据卷容器可以是不启动的(建议不运行)
          2.可以多次使用--volume-from参数从多个容器挂载多个数据卷
          3.也可以通过已挂载了数据卷容器的容器来挂载数据卷
        操作:
          .# docker run -d --rm -v test:/test --name dc1 centos
          .# docker run -it --volumes-from dc1 --name v1 centos
          .# docker run -it --volumes-from dc1 --name v2 centos
          .# docker run -it --volumes-from v1 --name v3 centos
    docker编排:
      docker compose: docker容器依赖
    Dockerfile:
      说明: 是用来构建docker file的构建文件, 是由一系列命令和参数构成的脚本.
      语法:
        1.每条指令必须大写且后面至少跟随一个参数
        2.# 表示注释
        3.每条指令都会创建一个新的镜像层, 并对镜像层进行提交
      指令:
        FROM image:tag             # 基础镜像, 当前新镜像是基于哪个镜像的. 该指令必须位于非注释第一行
        MAINTAINER name            # 镜像维护者的姓名和邮箱地址
        RUN command|["executable", "para1", "para2"]  # 容器在构建时需要运行的命令(分为shell模式和exec模式)
        EXPOSE port1 ...          # 当前容器对外暴露出的端口

        CMD command|["executable", "para1", "para2"]  # 容器在启动时需要运行的命令(分为shell模式和exec模式, docker file可以有多个cmd命令, 但只有最后一个生效, cmd会被docker run之后的参数替换)
        ENTRYPOINT                 # 同cmd, 但entrypoint会将docker run的之后命令当做参数使用

        ADD src dest|["src", "dest"]                  # 将宿主机目录下的文件拷贝进镜像且add命令会自动处理URL和解压tar包
        COPY src dest|["src", "dest"]                 # 类似add, 拷贝文件或目录到镜像中
                        
        VOLUME ["/data"]                              # 容器数据卷, 用于数据保存和持久化工作

        WORKDIR /path/workdir                         # 为run, cmd, entrypoin, copy和add命令指定工作目录
        ENV key=value ...                             # 指定环境变量, 在镜像构建过程中可以被后续RUN, ENTRYPOINT和CMD命令使用, 在镜像启动的容器中也会存在
        USER user:group|uid:gid                       # 用户运行后续命令的用户, 默认root用户.
        ONBUILD instruction                           # 镜像触发器, 当一个镜像被其它镜像作为基础镜像执行时, 会在子镜像构建过程中插入该指令
        LABEL key=value ...                           # 为生成的镜像添加元数据标签信息
        ARG                                           # 定义创建过程中使用的变量
        .dockerignore
      执行Dockerfile流程:
        1.docke从基础镜像运行一个容器
        2.执行一条指令并对容器做出修改
        3.执行类似docker commit的操作提交一个新的镜像层
        4.docker再基于刚提交的镜像运行一个新容器
        5.执行docker file中的下一条执行, 直至所有指令都执行完成
      步骤:
        1. # vim dockerfile
        2. # docker build
        3. # docker run 
      docker常用的父镜像(操作系统)
        说明:
        分类:
          1.busybox: 是一个集成了常用命令的精简工具箱, 只有1M多, 被誉为Linux系统的瑞士军刀.
          2.alpine: 面向安全的轻型Linux发行版, 只有5M多, docker官方推荐使用alpine作为默认的基础镜像环境
          3.debian/ubuntu
          4.centos/fedora
    docker网络:
      说明:
        1.容器启动时, 会创建网络连接的两端.一端连接到容器中的网络设备, 一端到主机上打开veth*的接口, 用来实现docker0与容器的网络通信
        2.容器的网络(相互访问, 对外访问)受宿主机的iptables规则影响
      docker0: 特殊的虚拟网桥, docker服务通过docker0为容器提供网络连接
      docker的C/S模式连接方式:
        1.unix://var/run/docker.sock
        2.tcp://host:port
        3.fd://socketfd
      网络创建过程:
        1.创建一对虚拟接口, 分别放在本地主机和容器的命名空间中
        2.本地主机一端的虚拟接口连接到默认的docker0网桥上, 并且有一个以veth开头的唯一名称
        3.容器一端的虚拟接口将放到新创建的容器中并修改名称为eth0, 这个接口只在容器的命名空间中可见
        4.从docker0可用地址段中获取一个空闲地址分配给容器的eth0, 并配置默认路由网关为docker0网卡的内部ip地址
        5.通过这种方式, 主机可以与容器通信, 容器之间也可以相互通信.
      容器的DNS和主机名:
        说明:
          1.docker启动容器时会从宿主机上复制/etc/resolve.conf文件
          2.容器运行时可以编辑/etc/hosts, /etc/hostsname和/etc/resolve.conf文件, 但这些修改是临时的, 容器终止或重启后并不会被保存.也不会被docker commit提交
      libnetwork:
        说明: 从1.7.0版本开始, docker正式将网络与存储两部分的功能都以插件的形式剥离出来, 允许用户
          通过不同的指令来选择不同的后端.独立的网络项目即为libnetwork
      
    存储驱动:
      说明:
      写时复制(cow): 当基于一个image启动了多个container时, cow技术可以让所有的container共享image的文件系统.只有当要对文件进行写操作时
        才会从image中将文件复制到自己的可写层修改, 不会更改image的源文件.使用cow可以有效地提高磁盘利用率
      用时分配: 当启动一个容器时并不会为该容器预分配磁盘空间, 而是当有新文件写入时才会按需分配
      分类:
        1.AUFS: 最早支持的文件系统, 对debian/ubuntu支持较好, 成熟度较高, 但没有并入Linux内核
        2.btrfs: 参考zfs等特性设计的文件系统, 由Linux社区开发, 试图未来取代device mapper, 成熟度有待提高 
        3.Device Mapper: RedHat和dockerd团队一起开发用于支持REHL的文件系统, 内核支持, 性能略慢
        4.overlay: 类似AUFS的层次化文件系统, 从Linux3.18开始已合并到内核, 但成熟度有待提高
        5.overlay2: docker1.12后推出, 原生支持128层, 效率比overlay高, 较新版本支持, 要求内核大于4.0
        6.vfs: 基于普通文件系统(ext, nfs等)的中间层抽象, 性能差, 较占用空间
        7.zfs: 最初设计为Solaris 10上的写时文件系统, 拥有不少好的特性, 但对Linux支持度不够
      

	内部命令





虚拟化技术所构建的集群处理能力
