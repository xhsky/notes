帮助信息
  vim拥有一个细致全面的帮助系统，启用：
    1.按F1
    2.:help [cmd]
    3.:helpgrep [cmd]
  报错：
    说明：vim在每个错误信息的前面都放了一个错误号,可从帮助系统中获得更详细的说明
    eg：
      :help e37
  http://vimgolf.com/
  按下Esc键会回到正常模式或撤消一个未完整输入的命令
  K:查看处于光标之下那个单词的手册页(即对该单词执行外部命令man)
  Vim的读音是一个词,而非是三个字母.写法是大写字母开头:Vim
  理想模式：
    用一键移动，另一键执行
    减少无关的移动
    使修改可重复
    使移动可重复
初始化
  安装
    # 下载最新版源码包
    # 解压
    # cd vim81/src
    # make
    # vim Makefile
      prefix=/opt/vim81
    # make install  
  启动及参数:
  状态信息:
    说明:信息文件viminfo用来存储状态信息,每次退出vim时(非保存)将会记录到viminfo中,每次打开vim时就会读取该文件
    信息：        
      1.命令行和模式搜索的历史记录
      2.寄存器内文本
      3.各种文件内的标记
      4.缓存器列表
      5.全局变量
    vim间信息移动:在两个vim间交换寄存器内容
      在第一个vim中执行 :wviminfo! /path/viminfo
      在第二个vim中执行 :rviminfo! /path/viminfo
    viminfo设置
      set viminfo='100,<50,s10,h>'    # 该值为一个选项和一个参数,多个之间用,分割.
        '1000   保存的标记数量
        f0      是否要存储全局标记(A-Z和0-9),设置1或不作规定则存储
        <500    每个寄存器内保存几行文本
        ... 
  重新载入配置文件: :source $MYVIMRC<cr>
  挂起:
    1.ctrl+z  / :suspend
    2.{执行外部命令}
    3.# fg
  从崩溃中恢复:
    说明:vim在停止4秒不输入的时候或者输入两百个字符后才会更新交换文件.交换文件名称(*.s[uvw][a-z])
    # vim -r file                 # 从交换文件中恢复
    # vim -r .file.swp            # 指定交换文件恢复,vim会自动找到对应的原始文件名称
    # vim -r                      # 寻找交换文件
编辑
  说明：命令都由一个操作符和一个动作构成
    operator  number  motion
      operator    操作符，代表要做的事
      number      附加的数字，代表动作重复的次数
      motion      动作，代表在所操作的文本上的移动,即操作符的操作对象
  记录:
    重复
      说明:进入插入模式那一刻起,直到返回普通模式为止,记为一次按键操作.且u,ctrl-r,:命令不能重复
      .           重复上次修改。每个编辑命令均存储到一个临时的缓冲区
    宏:记录一系列命令,将其保存到名为a-z的寄存器中(该寄存器与用来拷贝的寄存器是相同的,其内存储的即为记录的命令),同理A-Z的寄存器为追加寄存器
      记录:
        q{register}         # 启动
        cmds                # 输入命令
        q                   # 结束记录
        @{register}         # 执行宏记录,可在前通过计数前缀修饰
        注：若执行过一次宏,则可使用@@来替代上次执行
      修改命令记录:
        "{char}p            # 显示命令记录
        "edit"              # 正常编辑
        "[char]yy           # 将编辑后的内存保存到寄存器
    gv        # 选择上次选过的文本
  移动:所有的移动都可同operator结合(c,y,d)
    行内移动：
      字符:分为实际行和屏幕行
        h,j,l,k         # 针对实际行上下左右
        gh,gj,gl,gk     # 针对屏幕行上下左右，同时g0,g$,g^,gm(屏幕行中点)也适用与屏幕行
      单词:由字母、数字、下划线或其它非空白字符组成，单词间以空白字符分隔。符号和标点也算单词
        w     正向移动到下一单词的开头
        b     反向移动到当前/上一单词的开头
        e     正向移动到当前/下一单词的结尾
        ge    反向移动到上一单词的结尾
      字串:非空白序列组成，字串间以空白字符分隔(包含符号和标点)
        W、B、E、gE     # 即单词移动的大写
      单行:
        说明：f{char}在光标位置与当前行行尾之间查找指定的字符。若找到，则将光标移动到此字符上，若未找到，则保存光标不动。vim会记录执行过的f{char}命令，用;即可重复该命令，用,则以反方向查找
          f{char}   正向移动到下一个{char}
          F{char}   反向移动到上一个{char}
          t{char}   正向移动到下一个{char}所在之处的前一个字符上
          T{char}   反向移动到下一个{char}所在之处的后一个字符上
          ;         重复上次的字符查找命令
          ,         反向查找上次的字符查找命令

          0         移动到当前行的第一个位置处,同|
          ^         移动到当前行的第一个非空字符处
          $         移动到当前行的结尾处
          n|        移动到当前行的第n列,缺省第一列
    句子间移动
      说明：vim会寻找"?",".","!"以辨认句子的结束.若该符号后至少有两个空格或其作为最后一行的非空字符时,vim
            将其定位为一个句子的结束
      (       移动到当前句子的开头
      )       移动到下一个句子的开头
    可视模式下移动：
      o         # 移动到对角
      O         # 移动到同一行的另一角
    段落间移动：
      说明：
      {       移动到当前段落的开头
      }       移动到下一段落的开头
    小节间移动：
      说明：
      [[      移动到当前这一节的开头
      ]]      移动到下一节的开头
    屏幕内移动：
      H       移动到屏幕顶端的行
      M       移动到屏幕中间的行
      L       移动到屏幕底端的行
      nH      移动到屏幕顶端往下的第n行
      nL      移动到屏幕底端网上的第n行
    文件移动：
      搜索：
        文本：
          /str                      全文正向查找
          ?str                      全文反向查找
          /str\c                    \c用于忽略大小写
          /str\C                    \C使大小写敏感  
          /str1\|str2\|str3         表示选取一个(\|)
          /str\&                    ???
          gf          编辑光标之上的文件名
          /str/2                    行偏移.查到匹配后偏移的的行数.若为正,则光标往下落到n行行首,若为负,则光标往上落到n行行首
          /str/e[+-n]               字符偏移.e则匹配到单词词末.+n则再向右移,-n则再向左移
          /str/b[+-n]               字符偏移,b则匹配到单词词首(默认),+-n相同
          反向查找?具有相同的偏移功能,使用时需将所有的/换成?即可
        模式查找
          *                         前面的项重复0到任意次
          +                         前面的项重复1到任意次
          \=                        表示0到1次(可选)
          \ab\{m,n}                 指定重复次数.n省略时默认为0,m省略时默认无限大
        特殊字符:
          \t                        [Tab]
          \e                        [Esc]
          \r                        [CR]
          \b                        [BS]
          下列项无法用于[]内
          \d                        [0-9]             数位
          \D                        [^0-9]            非数位
          \x                        [0-9a-fA-F]       十六进制位
          \X                        [^0-9a-fA-F]      非十六进制位
          \s                        [   ]             <Tab>或<Space>
          \S                        [^  ]             非<Tab>或<Space>
          \a                        /[a-zA-Z]         所有字母
          \l                        [a-z]             小写字母
          \L                        [^a-z]            非小写字母
          \u                        [A-Z]             大写字母
          \U                        [^A-Z]            非大写字母
        注：
          1.光标在某个单词上时，输入* , 则光标会跳到下一个匹配项上，同时所有匹配项高亮。按n则跳到下一个匹配项
          2.光标在某个单词上时，输入# , 则光标会跳到上一个匹配项上，同时所有匹配项高亮。按n则跳到上一个匹配项
          3./和?都有历史记录，并且这两种历史记录是相互独立的
      括号：        []，{}，()
        %           1.在括号处按下%则会跳到相匹配的括号处，再按一次返回
                    2.在某一行按下%号时，vim会自动跳到第一个开或闭括号处
      行移动
        nG/gg                   跳转至第n行
        G                       跳转至最后一行
        gg                      跳转至第一行
        {number}%               跳转至百分比的位置
      位置标记:
        说明：分为手动标记和自动标记，且只在当前vim会话中可用，并不会存储在文件中
        手动标记:
          位置标记：会用选定的字母标记当前光标的位置(mm和`m是一对便于使用的命令)
            m{a-z}              每个文件都有一套小写字母标记,只在每个文件缓冲区里局部可见
            m{A-Z}              大写字母标记是全局的,在任何文件中都可使用大写标记跳转到其它文件相应位置
          快速跳回
            `{mark}             移动至标记所在字符
            '{mark}             移动至标记所在行的^
            ctrl+o              回到之前的位置，重复按o可回退多步
            ctrl+i              跳到较新的位置，重复
          查看标记
            :marks              查看所有标记
            :marks {mark}{mark} 查看单一标记详细信息
        自动位置标记
          ''            上次跳转的光标所在行的^
          ``            上次跳转的光标处
          `.            上次修改的位置
          `"            上次离开文件时的位置
          '0            上次离开文件时的位置
          `^            上次插入的位置
          `[            上次修改或复制的起始位置
          `]            上次修改或复制的结束位置
          `<            上次高亮选区的起始位置
          `>            上次高亮选区的结束位置
          :jumps        会显示一个可以跳转位置的列表，最后一个使用的标记会用>符号标记出来
  滚动
    屏幕滚动：
      上下滚动:
        ctrl+f  向下滚动一整屏
        ctrl+b  向上滚动一整屏
        ctrl+d  向下滚动半屏
        ctrl+u  向上滚动半屏
        ctrl+e  向上滚动一行
        ctrl+y  向下滚动一行
      左右滚动:
        zl      向左滚动
        zh      向右滚动
        zL      向左滚动半屏
        zH      向左滚动半屏
        zs      使光标位于屏幕的最左侧
        ze      使光标位于屏幕的最右侧
    重绘屏幕位置
      z+Enter/zt    将光标行移动到屏幕顶端
      z./zz         将光标行移动到屏幕中心，当当前行正好处于窗口顶部或底部时，可将当前行显示在窗口正中间
      z-/zb         将光标行移动到屏幕底端
      指定某行成为当前位置：  eg  200zz
  更改
    插入: c number  motion
      a/A i/I o/O s/S r/R
        注：除了o/O之外，其它插入命令都接受数值参数: 
      cw                更改文本直至单词末尾,同ce(由于vi的使用习惯，故由差异)
      ce                更改文本直至单词末尾
      c$
      c0
      cc                更改整行并准备输入
      S                 同cc
      C                 更改从光标至行尾并准备输入。同c$
      s                 删除当前字符并准备输入
      ea                在当前单词后写入
    替换
      r                                   准备替换当前光标的字符
      R                                   连续替换多个字符,按退格键恢复,按Esc停止
      :[range]s/old/new/[flags]           替换
      ~                                   更改字母大小写，将光标上的字符转成大写/小写.
      gU                                  改成大写
      gu                                  改成小写
      g~                                  行交换大小写
        以上三个命令都是操作符,需结合"motion",文本对象,可视模式进行更改
        guu,gUU,g~~                       对一行进行大小写操作
      xp                                  对调两个字符
      注：1.在r前使用数字，可使多个字符被同一字符替换
          2.若要改动一行以上文本的大小写，则必须使用其它方式(tr命令)来转换
    删除: d number  motion
      dw  从光标处删除至下一个单词的起始处
      de  从光标处删除至单词末尾
      d$  从光标处删除至行末
      dG  清空文件
      D   同d$
      dd  删除整行(操作为高频度，故特殊简化)      ***
      x   删除当前字符
      X   删除光标前的字符
      db  删除至单词首部的内容
    正则
  复制
    可视模式:按v键进入可视模式后，通过查找移动命令可以选中所需要的文本v motion  y
    yw
    ye
    y0
    y$
    yy  复制一整行，同Y
  粘贴
    p   将最后一次删除或粘贴的内容置入光标之后
    P   将最后一次删除或粘贴的内容置入光标之前
    J   和并两行,将第二行拼接至第一行,以空格分隔且行前后的多余空白符会一起被删除全部用一个空格替代。在J前使用数值可合并多行
    gJ  和并两行,保留行前后的空白符
    注：
      1.若移动的文本在一行以上，则黏贴新起一行；若移动的文本在一行以内，则黏贴在光标同一行
      2.y和d命令共享同一个缓冲区
  撤消与重做(撤消树)
    说明:vim提供了多层撤消功能,建立了撤消树(分支)
    按时间跳转
      :g-             在当前时间点后退
      :g+             在当前时间点前进
      :earlier {number}s/m/h/d
      :later {number}s/m/h/d
    按编号跳转
      :undo {number}
    查看撤消树分支:
      :undolist
    撤消和重做都是使用最新的分支,在树内上下跳转
      u       撤消最后执行的命令
      U       撤消对整行的更改
      ctrl+r  撤消掉撤消命令
    注：撤消命令的粒度：从进入插入模式开始，直到返回普通模式为止，在此期间输入或删除的任何内容都被当成一次修改。
  说明：插件实则是一个当vim启动时能被自动执行的脚本.将插件放到vim的plugin目录中即可生效(vim编译时加入+eval特性才行)
  插件分类：
    1.全局插件
      说明：用于所有类型的文件
    2.文件类型插件
      说明：仅用于特定类型的文件
  添加插件：
    全局插件:启动vim时会自动加载  
      1.获得一个插件目录
        - 随vim一起发布($VIMRUNTIME/macros/)
        - http://wwww.vim.org
        - vim的插件列表
        - 手动写
      2.放入插件目录(~/.vim/plugin,若无则手动建立)
        直接单个.vim文件或放在以插件名称为名的目录下
    文件类型插件:需要手动启用(:filetype plugin on)
      1.获得一个插件目录
        - 随vim一起发布($VIMRUNTIME/ftplugin/)
        - http://wwww.vim.org
        - vim的插件列表
        - 手动写
      2.放入插件目录(~/.vim/ftplugin/,若无则手动建立)

      注：
        文件类型插件的名称: 
          1.<filetype>.vim
          2.<filetype>_<name>.vim
          3.<filetype>/<name>.vim   放到插件类型为名的目录下
        插件必须以.vim结尾
  文本对象
    说明：vim中执行修改有三种方式(操作符-动作、可视模式、操作符-文本对象)
    文本对象分类：
      1.分隔符的文本对象:选取括号、引号及HTML标签的内容
        a ) ] } > ' " `         选取括号及其中内容
        i ) ] } > ' " `         选取括号中内容
        at                      一对xml标签
        it                      一对xml标签内部
      2.文本块
        iw                      当前单词
        aw                      当前单词及一个空格
        iW                      当前字串
        aW                      当前字串及一个空格
        is                      当前句子
        as                      当前句子及一个空格
        ip                      当前段落
        ap                      当前段落及一个空格
      注:
        1.a的范围是额外包含该单词前面或后面的一个空白字符(假如有的话，若无，则和i相同)
        2.a多用与d相关，避免空格。i多用于c相关，保持原结构
  可视模式(ctrl+v)下的插入: (在该模式下使用$命令可将可视列块扩展到每一行的行尾)
    插入: 
      I{str}<Esc>           # 将str插入到可视块的每一行的左边
      $A{str}<Esc>          # 将str插入到可视块的每一行的右边
    修改:
      c{str}<Esc>           # 删除整个可视列块并转入插入模式,且输入的文本会被插入到每一行(插入过程中不能断行)
      C{str}<Esc>           # 删除整个可视列块至每一行尾(未选中的右边字串也会被删除)并转入插入模式,且输入的文本会被插入到每一行(插入过程中不能断行)
    替换:
      ~                     # 交换大小写
      U                     # 转成大写
      u                     # 转成小写
      r[char]               # 以一个字符填充整个块
    平移:
      >                     # 将选中的文档向右平移,起始点是文档的左边界
      <                     # 将选中的文档向左平移
    连接:
      J                     # 将选中的可视列块所在行依次连接
      gJ                    # 将选中的可视列块所在行依次连接,保留行前后的空白符
  排版:
    gqap          # 排版当前段落,gq是操作符
    gg gq G       # 排版全文
    对齐文本:
      :{range}center [width]                # 使一定范围的行居中,width是可选项,用来确定一行的宽度.默认使用textwidth的值(若值为0,则默认80)
    右对齐:
      :{range}right [width] 
    左对齐
      :{range}left [margin]                 # margin代表左边的页边距,默认为0
    两端对齐:
    排版注释:
      说明:vim可以理解注释
  补全:
    单词补全
      说明:vim能自动补全插入的单词
      操作:在插入模式下
        ctrl+p/n              补全所有文本.p向前搜索,n向下搜索.下方的命令用来补全特定文本,且n和p同样适用
        ctrl+x ctrl+f         补全文件名
        ctrl+x ctrl+l         补全整行
        ctrl+x ctrl+d         补全宏定义(包括包含在文件里的)
        ctrl+x ctrl+i         当前文件及其所包含的文件
        ctrl+x ctrl+k         字典文件内的单词
        ctrl+x ctrl+t         同义词词典文件内的单词
        ctrl+x ctrl+]         补全标签
        ctrl+x ctrl+v         vim命令行
      搜索路径:
        1.当前文件
        2.其它窗口的文件
        3.所有缓冲区
        4.标签文件
        5.被当前文件以#include语句包含的所有头文件
    智能补全:
      说明;vim中叫全能补全,用来补全代码
      操作: 在插入模式下
        ctrl+x ctrl-o
      注:
        需要打开文件类型插件: 在vimrc中 filetype plugin on或filetype plugin indent on
  计算:
    ctrl+a            使光标下数字加1
    ctrl+x            使光标下数字减1
ex编辑器
  说明：
    1.vim是更通用的、更底层的ex行编辑器的"可视模式"。且ex以行为向导，更适用于对文件进行大规模的更改
    2.多个ex命令可由|来分隔从而来一行输入执行。但若某个命令影响了文件中各行的顺序，则下一个命令将在新的行地址上运行
    3.在vim中输入Q会调用ex，输入visual即可返回
  ex命令:
    说明：
      1.指定明确的行号
      2.用符号来指定相对于当前位置的行号
      3.标识某些行的搜索模式作为地址
    定义行范围：
      :3,18d          # 删除3-18
    列出文件的总行数
      :=
    行寻址符号
      .               # 表示当前行
      $               # 表示文件的最后一行
      %               # 表示文件中的每一行，与1,%意义相同
      :%d             # 删除文件中所有行
      .,+/-10d        # 相对行地址
    模式匹配：
      :/pattern/d
      :/pattern1/,/pattern2/d
    自定义命令行命令:
      :command 
      :command                          # 列出自定义命令


      注:
        1.用户自定义的命令必须以大写字母开头,不能用下划线,不建议用数字
  全局搜索与替换：
    :g/pattern                          # 显示所有包含这个模式的行
    :g!/pattern                         # 显示所有不包含这个模式的行
  改动多个文件:
    :args *.c                           # 将相关文件放进参数列表
    :argdo %s/old/new/ge  | update      # update将有改动的命令存盘
  替换:
    全局替换:
      :[range]s/old/new/[flags]           
        range:                  # 表示范围
          %                     # 全文
          {n},{m}               # 在n-m行之间,包含n和m
          ?str?,/str/           # ?和/表示搜索
          ?str?-1,/str/+2       # -1表示前一行,+2表示后两行
          'a,'b                 # 使用标记
          '<,'>                 # 使用可视模式(实则是标记)
        s                       # substitute
        flags:
          g                     # 一行内全局
          c                     # 每次替换前确认(y-是,n-否 跳过,a-全部替换 后续不再确认,q-退出 不再执行任何替换,l-最后 替换完当前后退出,^E-向上滚动一行,^Y-向下滚动一行)
          p                     # 打印处最后一个被修改的行
          e                     # 通知s命令找不到字符不是错误
    与上下文相关的替换：
      :[range]g/pattern/cmds    # 第一个g告知对文件中的所有行起作用，pattern用于识别发生替换的行。
        g                       # global找到一个匹配点并执行一个命令
    模式匹配的规则：
      .             # 匹配任意单一字符
      *             # 匹配任意多次
      .*            # 匹配任意数量的任意字符
      ^             # 一行开头
      $             # 一行结尾
      \             # 将其后的特殊字符当成一般字符
      []            # 匹配出方括号里的任意一个字符.[A-Z]  [0-9] [:;A-Za-z()]会匹配出4中标点加上所有的字母。
                    # ^在[]中第一个时，表示匹配任何一个不在方括号范围内的字符
      \(  \)        # 会将\(\)间的模式保存到保留缓冲区,可保存任意一行的9个模式,可通过\1到\9的序列重新显示
                    # :%s/\(That\)  or  \(this\)/\2 or  \1/   将That  or  this改成this  or  That
      \<  \>        # 匹配以某些字符开头\<或结尾\>的单词。可拆分使用。且*和#命令也是使用该原理来匹配单词
      注：
        .*[]^%/\?~$ 有特殊含义。若要查找它们，需要在前面加上一个 "\"
  保存和离开文件:
    :w file           # 将缓冲区的内容写入文件中，但不离开
    :w! file          # 当文件存时会提示错误,需加!,且write和!中间无空格
    :.,500w file      # 将光标所在行到第500行的内容写入file文件中
    :.,600w >>  file  # 将光标所在行到第500行的内容追加file文件中
    :wq               # 写入文件同时离开编辑器。这是无条件写入，即使文件没有被修改过
    :x/ZZ             # 写入文件同时离开编辑器。只有文件被修改过才会写入
    :q                # 离开编辑器
    :e!               # 消除所有的编辑结果恢复上一次存储的文件内容
    :q!               # 消除所有的编辑结果恢复上一次存储的文件内容，并离开vim
    :[n]r file        # 将file文件的内容读入到光标所在下一行或第n行后
    :r ![command]     # 读取命令的输出
    :saveas file      # 指定文件名保存文件,并开始编辑该文件
    :file filename    # 更改当前文件名(不保存),并开始编辑该文件
              
      注：以超级用户权限保存文件  :w  !sudo tee % > /dev/null
      :wq和:x的差异在编辑源代码并使用make时很重要，make是根据文件修改的次数而执行动作的
  命令模式下的编辑:
    移动光标:
      左右箭头按键            # 左右
      shift/ctrl+<left>       # 左移一个单词
      shift/ctrl+<right>      # 右移一个单词
      ctrl+e                  # 行首
      ctrl+b                  # 行尾
    删除:
      ctrl+w                  # 删除光标前的单词部分
      ctrl+u                  # 删除光标前的所有字符
    取消:
      <Esc>/ctrl+c
    命令行补全:
      <tab>                   # 会根据上下文自动补全命令、文件、选项
      ctrl+d                  # 当匹配有很多时,会显示相应的匹配列表
      ctrl+l                  # 将词补全为最长且无歧义字符串
    命令行历史:
      ctrl+p                  # 向上翻动
      ctrl+n                  # 向下翻动
      上下箭头按键            # 上下
      :history                # 显示历史记录
    命令行窗口:
      说明:下方打开一个类似vim的命令历史记录窗口,是主要用于编辑重写复杂命令
      q:                      # 打开
      <Enter>                 # 执行光标所在行的命令,与当前处于插入或普通模式无关.且更改操作不会导致历史记录被修改,只会增加到记录中 
  执行外部命令
    说明：!会告诉ex创建一个shell，并将后续文本视为Unix命令":!{command}"
    :!{program}               # 执行program
    :[range]!{program}        # 由program过滤文本(其结果替换原文本)
    :r !{program}             # 执行program并读取其输出
    :w !{program}             # ???
    !!date                    # !!用于对当前行执行命令.为文件加入时间戳
    :shell                    # 在vim内部启动一个新外壳
  重返某文件:
    :oldfiles               # less显示编辑过的文件,且 #<{number}代表该文件
    :browse oldfiles        # less显示编辑过的文件,按q退出时可按提示输入数字编辑该文件

  语法高亮  
  拼写检查
文件
  说明：所编辑的文件，实则是存在内存中的同名缓冲区，对文件的操作实则是对缓冲区内容的操作。除非存储缓冲区，否则编辑结果不会影响原始的文件。单独输入vim，会打开一个未命名的缓冲区
  显示文件信息
    ctrl+g        显示正在编辑的文件的名称，所处的当前行的行号，全文的总行数，光标之前的行占全文的百分比，和所处的列的列号。有时会看到一个分开的两个列号。例如，"col 2-9"。这表示光标处于第二个字符上，但由于使用了制表符，在屏幕上的位置是 9。
    g{ctrl+g}     显示正正编辑的文件行数,单词数,字符数,字节数
  缩进
    >>                            增加当前行的缩进层次
    <<                            减少当前行的缩进层次
    >G                            增加从当前行到文档末尾的缩进层级
    >i{                           将{}内的代码缩进
    v motion  >                   增加从所选行的缩进层级
  制表符和空格的相互转换:
    说明:制表符和空格的混用、更改不利于浏览文件,可将所有的制表符换成空格
    转成空格:
      :set expandtab              # 设定后不会影响原有的制表符
      :%retab                     # 将原有的制表符替换成空格
    转成制表符:
      :set noexpandtab
      :%retab
  打开和关闭
    指定位置：
      # vim +n  filename          在第n行打开文件
      # vim + filename            在最后一行打开文件
      # vim +/pattern filename    在第一个出现pattern的地方打开文件
    只读模式：
      # vim -R  filename          以只读模式打开文件，可强制保存(w!)
      # vim -M  filename          以只读模式打开文件，可强制保存(:set modeifiable; set write)
    打开多个文件：
      # vim -o file1 fil2         水平分割窗口，-o[number]则代表预分配number个窗口
    关闭:
  映射及缩写
    单词缩写：
      说明：vim可以定义缩写,在插入/命令行模式时将缩写自动展开成原文,缩写的展开会在按下非字母标点、空格、回车、Esc时发生(单词之后的非单词字符触发)
      设置：
        :ab abbr phrase         # 在插入和命令行模式同时设置
        :iab abbr phrase        # 只在插入模式设置(常用)
        :cab abbr phrase        # 只在命令行模式设置(不常见)
      查看：
        :ab                     # 显示的第一栏!代表两种模式缩写,i代表插入模式缩写,c代表命令行缩写                    
        :iab
        :cab  
      取消：
        :unab abbr          # 取消某个缩写
        :iunab abbr
        :cunab abbr
        :abclear            # 清除所有缩写
        :iabclear
        :cabclear
      注：缩写前的字串中有字符被映射,则缩写扩展后的结果包含了映射的内容,可用noreabbrev abbr phrase来定义缩写,从而禁止扩展的字符串被映射
    命令映射：
      说明: 将命令序列(一系列的键命令)映射成某按键.映射由最后一个字符触发
      分类:
        :map                                               # 普通,可视及操作符等待模式的映射
        :nmap                                              # 普通模式
        :vmap                                              # 可视模式
        :omap                                              # 操作符等待模式(当键入一个操作符后,vim会期待你键入的motion或文本对象即为映射)

        :map!                                              # 插入和命令行模式
        :imap                                              # 插入模式
        :cmap                                              # 命令行模式
        
        :<mode>noremap<!>                                  # 非递归映射,常用
      操作: 各模式操作相同
        :<mode>map [按键] sequence                              # 定义映射
        :<mode>unmap [按键]                                     # 取消映射
        :<mode>mapclear                                         # 清楚所有映射
        :<mode>map                                              # 查看所有映射 第一列显示该键有效的运行模式(空白表示为map) 第二列显示映射键(<>表示的特殊键若为彩色则代表有效,否则只是单纯的多个字母而已) 第三列显示命令序列
      特殊字符: 可用<keyname>来表示一个特殊字符
        <space>(空格) <c-d>(ctrl+d) <F2>(F2键) <cr>(回车)
      概念:
        重映射: 映射的结果会检查其中包含的映射并解析
        禁止重映射(noremap): 不检查与之相关的映射,每个模式都有一个类似的命令([mode]noremap)
        递归映射: 当一个映射调用它本身的时候,会无限制地运行下去(可以用来无限次重复一个操作)
        多字符映射的连续性: 当映射按键为多个字符时,需要连续快速输入才可生效
        leader: 自定义按键前缀,用于区别按键(若mapleader未设置或为空则自动用"\"代替)
          :let mapleader = "-"
          :nnoremap <leader>d dd
        local leader: 用于对某类型的文件而设置的按键
          :let maplocalleader = "\\"
      示例：
        :map 9 dwelp                                    # 颠倒两个单词顺序
        :map <F5> i{<Esc>ea}<Esc>                       # 用大括号将特定的单词括起来  
        :map \p i(<Esc>ea)<Esc>                         # 用括号将特定的单词括起来
        :omap <F7> a{}                                  # y<F7>可以复制一个{}块
        :inoremap " ""<Esc>i                            # 在插入模式下映射"为"",并禁止重映射
        :map <F2> G<F3>                                 # 重映射,在普通模式下插入时间戳
        :imap <F2> <Esc><F3>                            # 重映射,在插入模式下插入时间戳
        :map <F3> oDate: <Esc>:read !date<CR>kJ         # 读入时间
        :map ,, :s/str1/str2/<CR>:wnext<CR>,,           # 将一组文件第一行的字串替换
        :imap <C-A> <Nop>| cmap <C-A> <Nop>             # 使某个映射键无效可将其定义到<Nop>.且<Nop>(no operation)后不能有空格
      注:
        1.默认情况下功能键除<F1>外都没有预先定义的功能
        2.不同模式下可定义功能不同的同名映射键
        3.map后可通过|来分隔多个命令,即映射中不能在使用该符号,故|符号用<Bar>代替
        4.在map中使用空格作为映射键时应使用<Space>
        5.映射有歧义(aa aaa),当输入aa后,vim会等待另一个键的输入,若为a则后者映射被执行,若为其它字符,则前者映射被执行
        6.尽量使用非递归映射而非普通映射
    注: 命令映射只要输入key则映射,而不管被映射前后的字串.单词缩写则会匹配单词,只在需要的时候替换
  会话:
    说明:vim会话保存着当前所有和编辑相关的内容(文件列表,窗口布局,全局变量,选项以及其它信息),以便暂时保存
    创建:
      :mksession vimtxt.vim
    还原:
      :source vimtxt.vim      或者 # vim -S vimtxt.vim
    保存信息选项:
      :set essionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize
          blank         保留空窗口
          buffers       所有缓冲区
          curdir        当前目录
          folds         折叠
          help          帮助窗口
          options       所有选项和映射
          winsize       窗口大小
    注：
      会话记录不会存储标记位置,寄存器内容及命令行历史记录,因为它们是由viminfo记录的(每个会话可共享这些信息)
      若要记录当前的这些信息:
        记录:
          :mksession! /path/file.vim
          :wviminfo! /path/file.viminfo
        还原:
          :source /path/file.vim
          :rviminfo /path/file.viminfo
  视图:
    说明:视图存储单一窗口特性(会话存储时每个窗口的视图都存储了)
    分类:
      1.序号视图
        说明:vim自动为视图挑选名称.同一文件可储存10个视图,一个没有序号,九个则有序号1-9
        :mkview [1-9]               存储视图
        :loadview [1-9]             恢复视图,在同一文件下恢复
      2.命名视图
        说明:指定视图存储文件,可在编辑其它文件是打开该视图,相当于切换文件编辑
        :mkview /path/file.vim        存储视图
        :source /path/file.vim        恢复视图
  行模式：???
    说明:
    :set modelines={number}
    :set nomodeline               # 禁用
    格式:
      any-text vim:set {option}={value} ... : any-text
  折叠
    说明:用于将缓冲区中某以一范围的文本显示为屏幕的一行.折叠仅限于当前窗口.
    操作:
      zo                      打开折叠块
      zc                      折叠当前块
      zO                      打开当前行涉及到的折叠
      zC                      将当前块涉及到的折叠全部折叠
      zr                      增加当前折叠级别(foldlevel+1)
      zm                      减少当前折叠级别(foldlevel-1)
      zR                      全文打开折叠(set foldlevel=18)
      zM                      全文折叠(set foldlevel=0)
    手动折叠(manual): 退出文件后则手动折叠全部消失
      v+motion zf             创建折叠
      zn/N                    n:快速禁止折叠功能,N:恢复原来的折叠
      zi
      zd                      删除光标行上的折叠
      zD                      删除所有的折叠

      :mkview                 # 创建视图用来保存手动折叠
      :loadview               # 恢复
    缩进折叠(indent):
      说明:用缩减表示折叠层次,缩进和折叠深度之间的关系依赖于shiftwidth选项.每个shiftwidth为一个折叠深度/级别
      注: 当折叠方式定义为indent时,不能再手动折叠,这两者是相互冲突的(缩进宽度和折叠级别)
    标志折叠(marker)
      说明:文本中的标志用于指定一个折叠区的起点和终点.但是需要改动文本
    语法折叠(syntax)
      说明:vim为不同的语言设置了不同的语法文件
    表达式折叠(expr)
      说明:
  目录(文件浏览器)：
    说明:vim原生文件管理器:netrw,当vim打开一个目录时，就会打开一个文件管理窗口。它是一个常规的vim缓冲区，但其表示的是一个目录的内容
    工作目录:
      说明:vim中也有工作目录的概念，当vim启动时，它会采用shell的活动目录作为其工作目录
      :pwd                  打印工作目录
      :cd path              可切换目录
      :cd -
    操作:
      说明:可以用普通缓冲区中的所有命令来浏览目录列表
      文件编辑:
        <enter>             打开文件/目录
        o                   横向分割窗口并显示文件
        v                   纵向分割窗口并显示文件
        p                   使用preview-window
        p                   在上次的窗口中编辑
        t                   在新标签页中打开文件
      目录编辑:
        R                   光标下文件改名
        D                   光标下文件删除
        mb/gb               建立书签/转到书签
      浏览器显示:
        i                   控制列表风格(瘦,长,宽和树型)
        s                   排列方式(名称,修改日期,文件大小)
        r                   逆转排列顺序
    使用文件浏览器
      :browse sp [/path]                # 打开一个文件浏览器,browse几乎可以添加在任何打开文件的命令前
      :confirm browse edit              # 提供确认对话框,同样可以添加在任何编辑文件的命令之前
      :set browsedir=                   # 指定打开目录.last(使用上次的目录),buffer(使用当前缓冲区所在的目录),current(使用当前目录)
  编辑特殊文件:
    说明:vim可以编辑经过压缩、加密、二进制、互联网的文件
    换行符:
      说明:
        1.vim会自动识别不同的文件格式.若编辑的是本地文件,则无提示,若编辑的是win文件,则打开时会显示[dos]的标识,mac文件则显示[mac]的标识
        2.[noeol]标识代表在最后一行没有换行符(no end-of-line)
        unix      <LF>        $ 
        dos       <CR><LF>    ^M$
        mac       <CR>        ^M
      :set fileformats=unix.dos,mac                 定义识别不同系统文件(较难识别Unix和Mac文本,所以默认不对Mac文件识别)
      :set fileformat?                              显示当前使用的文件格式(set ff?)
      强制格式:
        :e ++ff=mac file                            ++告诉vim后面跟的是选项名
      转换:
        :set ff=unix
        :w
    编码:
      说明:
      强制编码:
        :e ++enc=utf-8 file                         ++告诉vim后面跟的是选项名(enc=encoding)
    互联网文件:
      说明:vim并非亲自与互联网联系,而是通过系统上安装好的程序
      编辑:将光标移到超链接的任意一个字符上去,然后使用gf命令
      支持的协议文件:
        /path/dir/file    本地文件
        ftp://            使用ftp命令
        rcp://            使用rcp
        scp://            使用scp
        http://           使用wget(只读)
    加密文件
      说明:vim可以对文件进行加密
      加密:
        # vim -x file           # -x表示要求加密(只有对该文件进行写操作后才能加密成功),保存退出后就自动加密存盘了
        :X                      # 或者在写完后加密
      解密:
        # vim file              # 输入密码即可自动查看内容
      取消加密:
        :set key=               # 将key设为空字符即可取消加密(同样,该方式也可加密,不过密码输入是明文的)
      限制:
        1.加密算法是有弱点的,无法媲美专业加密
        2.交换文件是不加密的(vim -x -n file/:setlocal noswapfile 可不创建交换文件,所有信息都保存在内存中)
        3.但文件在内存中是以明文存在的
        4.viminfo也是以明文存在的
        5.以上所有加密,解密,取消加密的方式都需要对文件有写入操作后才能成功,单纯的打开无效
        6.加密原理: 在文件的第一行写入相关信息
    二进制文件:
      说明:vim并非为此设计,故功能有限
      打开:
        # vim -b file
    压缩文件:
      说明:可以像编辑文件一样来编辑一个压缩的文件.在编辑过后会自动再存盘压缩
      支持的压缩协议:
        .Z          compress  
        .gz         gzip
        .bz2        bzip2
  插入特殊字符:在插入模式下
    本义字符:
      ctrl+v{char}                                    # 按本义插入一个字符
    二合字母:用两个字符表示一个特殊的字符
      :digraphs                                       # 显示所有二合字母
      ctrl+k {char}{char}                             # 插入
      :digraphs {char}{char} {char}/{number}          # 自定义二合字母
  添加新菜单
  选择语言
    说明:当启动vim时会检查环境变量从而找出所使用的语言  
    :language                       # 查看当前所用语言
  使用文件类型
缓冲区
  说明:缓冲区用来描述编辑当中的文件且缓冲区中还存放着全部标记,设定及其它与编辑文件相关的东西  
  分类：一个缓冲区一经使用,vim就记录了该缓冲区的信息
    激活缓冲区:显示在窗口内,并加载文本
    隐藏缓冲区:不显示在窗口内,但加载文本
    非激活缓冲区:不显示在窗口内,不加载文本(非缓冲区不会被遗忘,因为vim保存着他们的信息,如标记等)
  操作:
    :ls/buffers             查看缓冲区列表  
    :ls!/buffers!           查看缓冲区列表(包括外缓冲区)
      说明:
        第一栏是缓冲区号,可利用其编辑文件而不用键入文件名
        紧随其后的多栏是标志位,其后是文件名,最后是光标在该文件中最后一次停留的行号
      标志位:
        u                   列表外缓冲区(从列表中删除的缓冲区)
         %                  当前缓冲区
         #                  轮换缓冲区
          a                 激活缓冲区
          h                 隐藏缓冲区
           =                只读缓冲区
           -                不可改缓冲区
            +               已修改缓冲区
    :buffer N/name          凭编号直接跳到该缓冲区
    :bnext                  编辑下一个缓冲区
    :bprev                  编辑上一个缓冲区
    :bfirst                 编辑第一个缓冲区
    :blast                  编辑最后一个缓冲区
    :bdelete n1 n2 n3       从列表中删除缓冲区
    :N,M bdelete            删除缓冲区，该操作并不会影响缓冲区所关联的文件，而只是把该文件在内存中的映像删掉
    :hide e file            隐藏当前缓冲区并编辑新文件(不保存开始编辑新文件)
寄存器(registers) "
  说明: Vim用于临时保存数据的地方.不同与传统的编辑器(与系统共享一个寄存器即剪贴板),Vim具有多个寄存器分别保存不同的临时数据
  分类:
    1.无名寄存器 ""
      说明: 使用d,c,s,x等删除和用y等复制的文本都会被Vim用来填充该寄存器,而不论该文本是否有专门寄存器存储
      使用: p 或 ""p
    2.编号寄存器 "0到"9
      说明: Vim将删除和复制命令的文本保存在这些寄存器里
        1.寄存器0包含了最近复制(y)的文本.使用: "0p
        2.寄存器1包含了最近删除或修改的文本.每一次新的删除和修改,Vim都会把寄存器1的内容复制到寄存器2,2到3,新内容存到1,以次推类.而寄存器9的内容就消失了
        3.可利用.做恢复，缓冲区编号会自动增加。u可用来撤消
      使用: "[0-9]p
    3.行内删除寄存器 "-
      说明: 该寄存器保存删除不到一行内容的命令的文本
      使用: "-p
    4.命名寄存器 "a到"z 或 "A到"Z
      说明: Vim只在指定时使用该寄存器.指定小写字母时替换原有内容,指定大写字母时追加到原有内容之后
      使用: "{a-zA-Z}p
    5.三个只读寄存器 ": ". "%
      说明:
        ".      最近插入的文本(同插入模式命令<c-a>和<c-@>)
        "%      当前文件名(即$0)
        ":      最近执行过的命令行(命令行模式)
    6.轮换缓冲区寄存器 "#
      说明: 当前窗口轮换文件的名称
    7.表达式寄存器 "=
    8.选择和拖放寄存器 "* "+ "~
      说明: 这些寄存器用来保存GUI界面选择的文本(剪贴板).Vim使用剪贴板的前提是gvim存在(# vim --version | grep clipboard)
        X11提供了两种全局存储方式
          选择区: 程序拥有的,并在程序退出时消失
          剪切缓冲区: 存储在X服务器内部,会保持到被重写或X服务器退出
          "*    程序内部     
          "+    X服务器内部
          "~    保存最近一次拖放操作放下的文本
    9.黑洞寄存器 "_
      说明: 当写入到该寄存器时,什么都不会发生(可用来删除文本而不影响正常的寄存器).从寄存器读时什么都不会返回
      使用: "_[d/x/c]
    10.最近搜索模式急促器 "/
      说明: 包含最近的搜索模式内容
      使用: "/p
  操作:
     "{name}{y/x/c/s/d}       复制
     "{name}p                 粘贴
     :reg [name]              查看
  注:
    1.Vim有两个地方可以保存临时数据
      OS级别:剪贴板
      Vim级别:寄存器
    2.当使用命名寄存器时,编号寄存器和行内删除寄存器被忽略
多文件
  说明：
  编辑多个文件:
    # vim file1 file2 file3         # vim会只显示第一个
      :next                         # 编辑下一个,不可循环
      :wnext                        # 若有未保存的修改则进入下一个,相当于执行了两个命令(:write,:next)
      :previous                     # 编辑上一个文件,不可循环
      :wprev                        # 若有未保存的修改则进入上一个,相当于执行了两个命令(:write,:previous)
      :last                         # 移动到列表最后一个
      :first                        # 移动到列表第一个
      :args                         # 列出启动时指定的文件,当前编辑的文件会用[]括起来
      ctrl+^                        # 在前后两个文件之间快速跳转
  编辑另一个文件:
    :e filename
  对比:
    # vimdiff file1 file2           # 垂直分割的方式打开两个文件
  标签:
    说明:是一个标识符被定义的地方.标签列表可以保存在一个标签文件中,vim可以通过它从任何地方跳转到标签
多窗口
  说明：
    缓冲区: 保存了要编辑的文本，任何文件都只有一个对应的缓冲区
    窗口: 提供对缓冲区的观察窗口，从而查看和修改缓冲区中的内容。同一个缓冲区可能有多个对应的窗口。在一个窗口中对缓冲区所做的更改会在该缓冲区其它打开的窗口中显示出来
      vim默认在一个窗口中编辑所有文件，每个文件都有自己的缓冲区
  分割窗口：
    :[number]split/new file       # 水平分割窗口,number作为窗口高度.可使用快捷键ctrl+w+s
    :vsplit file                  # 垂直分割窗口,可使用快捷键ctrl+w+v 
  切换窗口：
    <c-w>w              循环切换
    <c-w>h              切换到左边
    <c-w>j              切换到下边
    <c-w>k              切换到上边
    <c-w>l              切换到右边
    <c-w>t              切换到最顶上
    <c-w>b              切换到最底下
  关闭窗口
    ex命令：
      :close            关闭活动窗口(不能关闭最后一个活动窗口)
      :only             只保留活动窗口，关闭其他窗口
    快捷键：
      <c-w>c
      <c-w>o
  窗口间的文本复制
  窗口排版
    窗口大小:
      [number]ctrl+w +            窗口增加一行,若有number,增加number行
      [number]ctrl+w -            窗口减少一行,若有number,减少number行
      [height]ctrl+w _            使该窗口无限大,若有height,则为指定窗口高度
    移动窗口: 会扩展到整屏的宽度
      ctrl+w K                    向上移动窗口
      ctrl+w H                    向左移动窗口
      ctrl+w L                    向右移动窗口
      ctrl+w J                    向下移动窗口
  统一保存与关闭
    :qall             # quit all
    :wall             # write all
    :wqall            # 保存所有文件并退出
    :qall!
  标签页
    说明：vim标签页是容纳一系列窗口的容器.标签页可以把工作分离到不同的工作区。vim中的标签页更像是Linux中的虚拟桌面，而不是其他编辑器中的标签页
    打开：
      :tabedit filename           打开一个新标签页
    切换：
      :tabn number                # 指定顺序号切换
      gt                          # 顺序切换
    关闭:
      :tabonly                    # 关闭非活动标签页
程序接口
自动命令:
  说明:当某些事件(文件读入或改变缓冲区等)发生时,它们会自动执行
  格式:
    autocmd [group] {events} {file_pattern} [nested] {command}
      [group]:          可选,用来管理和调用命令
      {events}:         触发事件列表,之间用,隔开
      {file_pattern}:   文件命令,通常带有通配符(*.txt会使得自动命令对所有的*.txt执行)
      [nested]:         允许自动命令嵌套
      {command}:        要执行的命令
    事件:
      BufReadPost         一个文件在被调入编辑之后触发
      Filetype              
      BufNewFile          编辑一个新文件时  
      ....
      ....
    文件匹配:
      *                   匹配任意字符,任意多次
      ?                   匹配任意字符,一次
      [abc]               匹配a或b或c
      .                   匹配一个.
      a{b,c}              匹配"ab"和"ac"
  操作:
    :autocmd                列出当前定义的所有自动命令
  自动命令组
    说明:

Vimscript
  简介: VimScript是用于配置,扩展vim的专用脚本语言.具有动态弱类型,面向对象(不太完整),异常处理等现代语言特征
  注释:
    1.通过"添加注释
    2.execute,echo,echom后不能跟注释,因为它们会把"当作成字符串的开始.但可以将注释加到|后(eg: echo "foo" | "这是一个注释)
  设置选项(set): 
    说明：主要有两种类型的选项(布尔选项和键值选项)
    更改设置:
      1.切换选项
        :set {option}               # 打开
        :set no{option}             # 关闭
        :set {option}!              # 切换布尔值
      2.对选项设置参数
        :set  option=value
    查看当前选项值：
      :set  option?
    重设为默认值
      :set option&
    示例：
      底部显示信息
        set showmode                # 底部显示当前模式
        set showcmd                 # 在窗口右下角显示未完成的命令,命令被执行则消失
        set ruler                   # 在窗口右下角显示当前光标的位置
        set cmdheight=3             # 定义屏幕底部的高度
      颜色
        set background=dark/light   # 设置深色/浅色,需在synatx enable前调用，否则不起作用
      备份
        set backup                  # 当该文件被覆盖时自动产生备份文件(只备份最初的一次,名称为原文件名后加~)
        set backupext=.bak          # 更改扩展名后缀
        set backupdir=              # 指定备份文件目录,默认情况下与原始文件路径一致
        set writebackup             # ???
        set patchmode               # ???
      可写
        set modifiable              # 可更改
        set write                   # 可保存
      窗口大小
        set winheight=1             # 最小的期望窗口高度
        set winminheight=1          # 最小的硬性窗口高度
        set winwidth=20             # 最小的期望窗口宽度
        set winminwidth=1           # 最小的硬性窗口宽度
        set equalalways             # 使所有窗口在关闭/打开时新窗口时总保持相同大小
      排版
        set autoindent              # 自动缩进(新行会延续上一行的缩进)
        set smartindent             # 自动缩进(新行会延续上一行的缩进;在每个{处新增一行缩进;在cinwords设置的单词后也会添加新一级缩进)
        set cinwords=               # 定义缩进词(if,else,while,do,for,switch)
        set shiftwidth=2            # 定义<<和>>的缩排距离和自动缩进，默认是8个空格
        set tabstop=2               # 定义tab的长度   
        set softtabstop=2           # 混合使用制表符和空格(每次<Tab>键会和移动softtabstop的值(空格),再按<Tab>时会替换成制表符)
        set smarttab                # 缩进中的制表符使用shiftwidth,对第一个非空字符后输入的<Tab>使用真正的制表符
        set expandtab               # <Tab>键会插入制表符数量的空格,在文件中不存在制表符(调整缩进可使用ctrl+d)

        set wrap                    # 设置长行自动回绕,否则多屏幕行将显示为一行
        set textwidth=72            # 每行达到72个字符就会自动换行
        set sidescroll=10           # 当设置nowrap时，vim会自动向右滚动以便看到后续的文件。要一次滚动的字符
        set linebreak               # 断词,当设置了wrap后vim将会在一个合适的地方回绕显示
        set list/nolist             # 显示状态(Tab->  ^I,行结尾->$).  :[m,n]l会显示要求行的tab和行结束符
      行号
        set number                  # 显示行号
        set relativenumber          # 显示相对行号,若number被设置,则当前行显示行号,其它行显示相对行号
        set numberwidth=4           # 显示行号时的最小列数.若实际行号超过最小列数则自适应
        
      交换文件(swp)
        set updatecount=200         # 指定输入的字符数后更新交换文件
        set updatetime=4000         # 指定停止输入的时间(ms)后更新交换文件
      查找路径:
        set path=.,/usr/include,,   # vim中查找文件的一系列路径
      匹配:
        set showmatch               # 当输入闭括号时，光标会先暂时移动到对应的开括号处停留0.5秒再回到当前位置 
        set matchtime=15            # 设置在匹配括号上停留的时间(1.5s),单位是1/10秒
      查找文本
        set ignorecase              # 忽略查找字符的大小写
        set ignorecase smartcase    # 查找字母为小写时,忽略大小写;查找字母中还有大写时,不忽略
        set hlsearch                # 查找时高亮显示所有匹配
        set incsearch               # 查找时在输入字符串的过程中就显示匹配点
        set wrapscan                # 查找到文件开头或结尾后自动折返
      折叠:
        set foldmethod=             # manaul/indent/
        set foldcolumn=4            # 在窗口左边显示4长度的栏来显示折叠(+表示某个设置的折叠,-表示打开折叠的开头,|表示该折叠内其余的行)
        set foldlevel=3             # 指定折叠的深度.若折叠深度大于等于设定值,则设置折叠
        set foldopen=
        set foldclose=
      注释:
        set formatoptions=          # 指定标志位
        set comments=               # 定义注释的样式()

      set autowrite               # 在多文件间跳转时可通过该选项自动保存以便跳转
      filetype indent on          # 会使vim自动检查文件类型,识别后查找相关缩进文件(vim中包含了多种编程语言的缩进文件)从而缩进当前文件

      set history=50              # 定义查找模式命令的历史长度
      set whichwrap=b,s,<,>,[,]   # 移动命令换行
                                    1.b,s:当光标位于行首/行尾时,可通过<Space>/<BS>移动到另一个行
                                    2.<,>:允许左右箭头键跨行(在普通模式中)
                                    3.[,]:允许左右箭头键跨行(在插入模式中)
      :set all      显示vim正在使用的选项
      :version      显示版本及编译信息
      :syntax on    激活语法高亮功能
      :filetype plugin indent on  
      
      支持的文件类型：$VIMRUNTIME/syntax
      支持的颜色方案：$VIMRUNTIME/colors
  数据类型:
    分类:
      number:         32位有符号整数
      float:          浮点数 
        1.当在运算、比较或其它操作中混合使用Number和Float类型.Vim会把Number转成Float,并以Float格式作为结果
        2.Float缺省以六位精确度显示
      string:         null结尾的8位无符号字符串
        
      funcref:        函数引用.函数引用类型的变量名必须以大写字母开头
      list:           有序列表
      dictionary:     无序的key/value容器
      bool            布尔值(true|false)
      None            空(null|none)
      job             作业
      channel         通道
  变量:
    说明:变量名由字母,数字,下划线组成.不能以数字开头.
    分类: 变量有不同的命名空间,根据附加的的前缀决定
      str                         # 无前缀.在函数内则位局部变量,否则为全局变量
      g:var                       # 全局变量
      a:var                       # 函数参赛
      l:var                       # 函数局部变量
      b:var                       # buffer局部变量
      w:var                       # window局部变量
      t:var                       # tab局部变量
      s:var                       # 脚本的局部变量
      v:var                       # Vim预定义的内部变量
    操作
      let name = 表达式           # 变量赋值
      unlet name                  # 删除变量并释放其占用的缓存
      unlet! s:count              # 当该变量不存在时删除不报错
      let                         # 查看当前定义的所有变量
      exists("s:count")           # 检查该变量是否存在
      let name="\"peter\""        # 使用双引号
  表达式:
    name                          # 变量
    &name                         # 选项,&用来引用选项
      set textwidth=80 等价于 let &textwidth=80(常用)
    @r                            # 寄存器,@用来引用寄存器名称  
    + - * / %                     # 算术
    .                             # 用来连接两个字符串,而非默认使用空格
    \                             # 转义
    ''                            # 单引号中内容将无视转义符(唯一例外是单引号中有两个连续'',则输出只显示一个')
    a ? b : c                     # 若a为真,则选b,否则选c
    ==                            # 比较操作符.当比较字符串时无法确认用户配置的大小写敏感,一个不加包装的==不应该出现在你的插件代码里
    ==?                           # 比较操作符.无论怎么配置都大小写不敏感
    ==#                           # 比较操作符.无论怎么配置都大小写敏感
  操作符:
    使用            'ignorecase'    匹配大小写	    忽略大小写
    等于                ==		        ==#		          ==?
    不等于              !=		        !=#		          !=?
    大于                >		          >#		          >?
    大于等于            >=		        >=#         		>=?
    小于                <         		<#	          	<?
    小于等于            <=		        <=#		          <=?
    匹配正规表达式		  =~	        	=~#	          	=~?
    不匹配正规表达式	  !~	        	!~#	          	!~?
    相同实例		        is        		is#		          is?
    不同实例		       isnot    		isnot#	       	isnot?
  逻辑语句:
    条件语句: vim把任何非0值当真,0代表假(以数字开头的字符串会被强制转换成数字,否则转成0)
      if {condition}
        {statements}
      elseif
        {statements}
      else
        {statements}
      endif
    循环:
      for  in  
      endfor

      while <expression>
      endwhile
    异常:
      try
        ...
      catch <pattern {option}>
        ...
      finally
        ...
      endtry
    逻辑操作: 对数字和字符串都可以做逻辑操作
      ==  !=  >  < 
      a ~= b            匹配,a被当做一个字符串,b为匹配模式
      a !~ b            不匹配
      countnue          跳出当前循环
      break             结束循环
      .                 连接字符串运算符
    输出语句:
      echo "str"                          # 屏幕底部打印
      echom "str"                         # 作用同echo,但只接受整数和字符串参数,且该信息会保存到message中
  函数:
    说明:vim定义了大量的函数并通过其提供了丰富的功能
    分类:
      函数同变量一样也有作用范围
    操作:
      call <function>()               # 调用函数(返回值会被丢弃)
      delfunction <function>          # 删除
    定义:
      function[!] <Name>(arg1,arg2,etc.)
        <function body>
        "!覆盖同名函数定义
        "函数名必须以大写字母开头
      endfunction
    返回值:
      说明: 若函数未定义返回值,则隐式返回0
      return
    函数参数: 在函数内使用的变量都需加前缀a:
      分类:
        普通参数:
        可变参数:
          在函数定义中,参数为"...",代表可以接受任意数目的参数
            a:0    为...的参数数量(排除已命名的参数)
            a:1    ...中的第一个参数
            a:2    ...中的第二个参数
            a:000  包括...中所有参数的列表
          普通参数和可变参数写在一起时,普通参数需在可变参数之前
    内置函数:
        strlen("str") len("str")          长度
        split("str1,str2,str3",",")       将字符串切割成列表,可指定分隔符(默认为空格)
        join(["str1","str2"],"...")       将列表中的项目通过分隔符连接成字符串,默认分隔符为空格
        join(split("str1 str2"),";")      join和split的结合
        tolower("str")                    将字符串转成小写
        toupper("str")                    将字符串转成大写

  execute:
    说明: 计算其后接入的表达式,将返回的字符串当作Ex命令执行
  normal:
    说明: 
      1.执行若干普通模式命令
      2.normal可以识别到当前用户的映射,故应永远使用normal!(忽略所有映射)
      3.normal会忽略掉类似<CR>的特殊字符.一个替代方法是使用execute,它可以将表达式作为参数从而使用可显示字符来代表特殊字符(eg: exe "normal \<c-w>\<c-w>")



        
        

  面向对象
    说明: Vim没有原生的类的支持.但可以用字典模拟基本的类

  列表和字典:
  异常:
  插件:
    说明：插件实则是一个当vim启动时能被自动执行的脚本.将插件放到vim的plugin目录中即可生效(vim编译时加入+eval特性才行)
    插件分类：
      1.全局插件
        说明：用于所有类型的文件
      2.文件类型插件
        说明：仅用于特定类型的文件
    添加插件：
      全局插件:启动vim时会自动加载  
        1.获得一个插件目录
          - 随vim一起发布($VIMRUNTIME/macros/)
          - http://wwww.vim.org
          - vim的插件列表
          - 手动写
        2.放入插件目录(~/.vim/plugin,若无则手动建立)
          直接单个.vim文件或放在以插件名称为名的目录下
      文件类型插件:需要手动启用(:filetype plugin on)
        1.获得一个插件目录
          - 随vim一起发布($VIMRUNTIME/ftplugin/)
          - http://wwww.vim.org
          - vim的插件列表
          - 手动写
        2.放入插件目录(~/.vim/ftplugin/,若无则手动建立)

        注：
          文件类型插件的名称: 
            1.<filetype>.vim
            2.<filetype>_<name>.vim
            3.<filetype>/<name>.vim   放到插件类型为名的目录下
          插件必须以.vim结尾
命令和对象：
  对分隔符文本对象操作
    选取：  按v键后再输入
    更改：  按c键后在输入
    删除：  按d键后再输入
    复制：  按y键后再输入
  编辑命令：
    文本对象          更改        删除        复制
    单词              cw          dw          yw
    后退三个单词      3cb         3db         3yb
    一行              cc/S        dd          yy/Y
    到行尾            C           D           y$
    到行首            c0          d0          y0
    字符              r           x           y1

  宏：
    q[a-zA-Z]
    @
  标记 m
    m[a-zA-Z]
    `
  寄存器 "
    "[a-zA-Z]

vim插入模式和bash中:
  ctrl+w                删除前一个单词
  ctrl+h                删除前一个字符,同<bs>
  ctrl+u                从光标删除至上一次按<Esc>处
  shift/ctrl+<left>     左移一个单词
  shift/ctrl+<right>    右移一个单词

  vim中
    ctrl+a              将上次在插入模式下输入的文本复制一次
    ctrl+@              执行ctrl+a并退出插入模式
    ctrl+y              插入光标上方的字符
    ctrl+e              插入光标下方的字符
    ctrl+r{register}    插入寄存器中的内容
    ctrl+o{cmd}         执行一次普通命令模式后立刻返回插入模式(插入模式提供的命令有限,普通模式进入进出太麻烦)
    ctrl+t              进入下一层的缩排(shiftwidth)
    ctrl+d              回到上一层的缩排(shiftwidth)
  shell中
    ctrl+a              移动到行首
    ctrl+e              移动到行尾
    ctrl+t              交换最后两个字符位置
    ctrl+y              粘贴上一次删除的内容

    alt+f               跳到下一个空格
    alt+b               跳回上一个空格
    alt+<bs>            删除前一个单词

